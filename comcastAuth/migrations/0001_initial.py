# Generated by Django 4.2.5 on 2023-09-17 19:46

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="DiversityInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone", models.CharField(max_length=14, unique=True)),
                ("address", models.CharField(max_length=500)),
                ("ssn", models.CharField(max_length=9)),
                (
                    "drug_test",
                    models.ImageField(null=True, upload_to="uploads/gender/"),
                ),
                (
                    "driver_license_front",
                    models.ImageField(null=True, upload_to="uploads/gender/"),
                ),
                (
                    "driver_license_back",
                    models.ImageField(null=True, upload_to="uploads/gender/"),
                ),
                ("tax_refund", models.CharField(max_length=10)),
            ],
            options={
                "verbose_name_plural": "Diversity Information",
                "db_table": "Diversity Information",
            },
        ),
        migrations.CreateModel(
            name="JobList",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("job_title", models.CharField(max_length=9, unique=True)),
                (
                    "job_description",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("Job_image", models.ImageField(null=True, upload_to="uploads/jobs/")),
            ],
            options={"verbose_name_plural": "JobLists", "db_table": "JobList",},
        ),
        migrations.CreateModel(
            name="ApplyJob",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("phone", models.CharField(max_length=14, unique=True)),
                (
                    "email",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                ("resume", models.ImageField(null=True, upload_to="uploads/resume/")),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="comcastAuth.joblist",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Apply Jobs", "db_table": "Apply Job",},
        ),
        migrations.CreateModel(
            name="Users",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("name", models.CharField(db_index=True, max_length=30)),
                (
                    "email",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=100,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        blank=True, db_index=True, max_length=14, unique=True
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(auto_now_add=True, verbose_name="date_joined"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        auto_now=True, null=True, verbose_name="last_login"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={"verbose_name_plural": "Users", "db_table": "Users",},
        ),
    ]
