
// All customer function

$(function(){
  $('.jobs-callback-error').each(function() {
    var errorString = getUrlParameter(null, 'error');
    var errorMessage = $(this).find('.content').html();
    if (errorString) {
      var decodedString = decodeURIComponent(errorString);
      if (isJson(decodedString)) {
        var errorObject = JSON.parse(decodedString);
        errorMessage = _.get(errorObject, 'message', 'Login fail.');
      }
    }

    if (errorString === 'access_denied') {
      $(this).parent().find('.btn-primary').remove();
    }

    if (errorString) {
      var errorContent = $(this).find(".list-message div[error-key='" + errorString + "']");
      if (errorContent.length > 0) {
        errorMessage = errorContent;
      }
    }

    if (!errorMessage) {
      errorMessage = 'Login fail.';
    }
    $(this).find('.content').html(errorMessage);
  });
});


/* downscale 1.0.5
   Better image downscale with canvas.
   https://github.com/ytiurin/downscale
   Eugene Tiurin <yevhentiurin@gmail.com>
   Under MIT license
*/
jQuery(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define([], factory);
    } else if (typeof module === 'object' && module.exports) {
        module.exports = factory();
    } else {
        root.downscale = factory();
    }
}(this, function () {

function resizeWithCanvas(canvas, source, destWidth, destHeight, sourceX,
  sourceY, sourceWidth, sourceHeight)
{
  var canvas = document.createElement("canvas")

  canvas.width  = destWidth
  canvas.height = destHeight

  var ctx = canvas.getContext("2d")

  ctx.mozImageSmoothingEnabled    = true
  ctx.imageSmoothingQuality       = "high"
  ctx.webkitImageSmoothingEnabled = true
  ctx.msImageSmoothingEnabled     = true
  ctx.imageSmoothingEnabled       = true

  ctx.drawImage(source,
    sourceX, sourceY, sourceWidth, sourceHeight,
    0, 0, destWidth, destHeight)

  return canvas
}
function round(val)
{
  return (val + 0.49) << 0
}


function ImageDataPolyfill (width, height) {

  const canvas = document.createElement('canvas'),
        ctx = canvas.getContext('2d'),
        imageData = ctx.createImageData(width, height);
  return imageData;
};

function downsample(sourceImageData, destWidth, destHeight, sourceX, sourceY,
  sourceWidth, sourceHeight)
{
  var dest = new ImageDataPolyfill(destWidth, destHeight)

  var SOURCE_DATA  = new Int32Array(sourceImageData.data.buffer)
  var SOURCE_WIDTH = sourceImageData.width

  var DEST_DATA  = new Int32Array(dest.data.buffer)
  var DEST_WIDTH = dest.width

  var SCALE_FACTOR_X  = destWidth  / sourceWidth
  var SCALE_FACTOR_Y  = destHeight / sourceHeight
  var SCALE_RANGE_X   = round(1 / SCALE_FACTOR_X)
  var SCALE_RANGE_Y   = round(1 / SCALE_FACTOR_Y)
  var SCALE_RANGE_SQR = SCALE_RANGE_X * SCALE_RANGE_Y

  for (var destRow = 0; destRow < dest.height; destRow++) {
    for (var destCol = 0; destCol < DEST_WIDTH; destCol++) {

      var sourceInd = sourceX + round(destCol / SCALE_FACTOR_X) +
        (sourceY + round(destRow / SCALE_FACTOR_Y)) * SOURCE_WIDTH

      var destRed   = 0
      var destGreen = 0
      var destBlue  = 0
      var destAlpha = 0

      for (var sourceRow = 0; sourceRow < SCALE_RANGE_Y; sourceRow++)
        for (var sourceCol = 0; sourceCol < SCALE_RANGE_X; sourceCol++) {
          var sourcePx = SOURCE_DATA[sourceInd + sourceCol + sourceRow * SOURCE_WIDTH]
          destRed   += sourcePx <<  24 >>> 24
          destGreen += sourcePx <<  16 >>> 24
          destBlue  += sourcePx <<  8  >>> 24
          destAlpha += sourcePx >>> 24
        }

      destRed   = round(destRed   / SCALE_RANGE_SQR)
      destGreen = round(destGreen / SCALE_RANGE_SQR)
      destBlue  = round(destBlue  / SCALE_RANGE_SQR)
      destAlpha = round(destAlpha / SCALE_RANGE_SQR)

      DEST_DATA[destCol + destRow * DEST_WIDTH] =
        (destAlpha << 24) |
        (destBlue  << 16) |
        (destGreen << 8)  |
        (destRed)
    }
  }

  return dest
}
function createTiming(enabled, source, destWidth, destHeight)
{
  var start  = new Date
  var timing = {}
  var prev   = start
  var n      = "01"

  return {
    mark: enabled ? function(name) {
      name = n + ". " + (name || "...")
      timing[name] = { "time (ms)": (new Date) - prev }
      prev = new Date
      n = ("0" + ((n >> 0) + 1)).substr(-2)
    } : new Function,
    finish: enabled ? function() {
      timing[n + " TOTAL"] = { "time (ms)": (new Date) - start }
      console.log("IMAGE SOURCE:", source)
      console.log("DOWNSCALE TO:", destWidth + "x" + destHeight)
      console.table(timing)
    } : new Function
  }
}

function createCache()
{
  var keys       = []
  var values     = []
  var subscribes = []
  var PENDING    = new Object

  return {
    createSetter: function(key) {
      if (this.get(key)) {
        return
      }
      var cacheInd = keys.push(key) - 1
      values.push(PENDING)
      subscribes.push([])

      return function(value) {
        values[cacheInd] = value
        subscribes[cacheInd] = subscribes[cacheInd].reduce(function(r, resolve) {
          resolve(value)
        }, [])
      }
    },
    get: function(key, resolve) {
      var cacheInd = keys.indexOf(key)
      if (!~cacheInd) {
        return
      }
      if (values[cacheInd] === PENDING) {
        subscribes[cacheInd].push(resolve)
        return
      }
      resolve(values[cacheInd])
    },
    has: function(key) {
      return !!~keys.indexOf(key)
    }
  }
}

function getImageData(canvas, img, sourceWidth, sourceHeight)
{
  canvas.width  = sourceWidth
  canvas.height = sourceHeight

  var ctx = canvas.getContext("2d")
  ctx.drawImage(img, 0, 0)

  return ctx.getImageData(0, 0, sourceWidth, sourceHeight)
}

function putImageData(canvas, imageData)
{
  canvas.width  = imageData.width
  canvas.height = imageData.height

  var ctx = canvas.getContext("2d")
  ctx.putImageData(imageData, 0, 0)

  return canvas
}

function remapDimensions(destWidth, destHeight, sourceX, sourceY, sourceWidth,
  sourceHeight)
{
  var origSourceWidth  = sourceWidth
  var origSourceHeight = sourceHeight

  var sourceRatio = sourceWidth / sourceHeight

  if (destWidth === 0) {
    destWidth = destHeight * sourceRatio >> 0
  }

  if (destHeight === 0) {
    destHeight = destWidth / sourceRatio >> 0
  }

  var destRatio   = destWidth / destHeight

  if (destRatio > sourceRatio) {
    sourceHeight = sourceWidth / destRatio >> 0
  }
  else {
    sourceWidth = sourceHeight * destRatio >> 0
  }

  var sourceX = sourceX || (origSourceWidth  - sourceWidth)  / 2 >> 0
  var sourceY = sourceY || (origSourceHeight - sourceHeight) / 2 >> 0

  return {
    destWidth    : destWidth,
    destHeight   : destHeight,
    sourceX      : sourceX,
    sourceY      : sourceY,
    sourceWidth  : sourceWidth,
    sourceHeight : sourceHeight
  }
}

function produceResult(canvas, options, callback)
{
  if (options.returnCanvas) {
    callback(canvas)
    return
  }

  if (options.returnBlob) {
    canvas.toBlob(callback, "image/" + (options.imageType || "jpeg"),
      options.quality || .85)
    return
  }

  var dataURL = canvas.toDataURL("image/" + (options.imageType || "jpeg"),
    options.quality || .85)

  callback(dataURL)
}

function loadArrayBuffer(source, callback)
{
  var xhr = new XMLHttpRequest

  xhr.open("GET", source)
  xhr.responseType = "arraybuffer"

  xhr.addEventListener("load", function() {
    callback(this.response)
  })

  xhr.send()
}

function loadImg(img, callback)
{
  if (img.complete) {
    callback()
  }
  else {
    img.addEventListener("load",  callback)
  }
}

function loadVideo(video, callback)
{
  if (video.readyState > 1) {
    callback()
  }
  else {
    video.addEventListener("loadeddata", callback)
  }
}

function detectSourceType(source)
{
  if (source instanceof File) {
    return "File"
  }
  if (source instanceof HTMLImageElement) {
    return "HTMLImageElement"
  }
  if (source instanceof HTMLVideoElement) {
    return "HTMLVideoElement"
  }
  if (typeof source === "string") {
    return "URL"
  }
}

function validateArguments(args)
{
  if (args.length < 3) {
    return new TypeError("3 arguments required, but only " + args.length + " present.")
  }
  if (!detectSourceType(args[0])) {
    return new TypeError("First argument should be HTMLImageElement, HTMLVideoElement, File of String")
  }
  if (typeof args[1] !== "number") {
    return new TypeError("Second argument should be a number")
  }
  if (typeof args[2] !== "number") {
    return new TypeError("Third argument should be a number")
  }
}

function downscale(source, destWidth, destHeight, options, cb)
{
  var timing = createTiming(options && options.debug || false,
    source, destWidth, destHeight)

  var err = validateArguments(arguments)
  if (err instanceof TypeError) {
    return Promise.reject(err)
  }

  options = options || {}

  var resolveResult, rejectResult
  resolveResult = function(result) {
    if(cb) {
      cb(result);
    }
  };
  // var result = new Promise(function(resolve, reject) {
  //   resolveResult = resolve
  //   rejectResult  = reject
  // })

  downscale.canvas = downscale.canvas || document.createElement("canvas")
  downscale.cache  = downscale.cache  || createCache()

  var canvas = downscale.canvas
  var cache  = downscale.cache

  if (cache.has(source)) {
    timing.mark()
    cache.get(source,
    function(cacheData) {
      timing.mark("PENDING CACHE")
      var img = cacheData[0]
      var imageData = cacheData[1]

      var dims = remapDimensions(destWidth, destHeight, options.sourceX,
        options.sourceY, imageData.width, imageData.height)

      if (dims.sourceWidth  / dims.destWidth  >= 2 &&
          dims.sourceHeight / dims.destHeight >= 2) {
        timing.mark()
        var destImageData = downsample(imageData, dims.destWidth,
          dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth,
          dims.sourceHeight)
        timing.mark("DOWNSCALE")

        canvas = putImageData(canvas, destImageData)
      }
      else {
        canvas = resizeWithCanvas(canvas, img, dims.destWidth,
          dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth,
          dims.sourceHeight)
        timing.mark("RESIZE WITH CANVAS")
      }

      produceResult(canvas, options,
      function(result) {
        timing.mark("PRODUCE RESULT")
        resolveResult(result)
        timing.finish()
      })
    })

    return result
  }

  var scaleSourceResolve = function(source, width, height) {
    var dims = remapDimensions(destWidth, destHeight, options.sourceX,
      options.sourceY, width, height)

    if (dims.sourceWidth  / dims.destWidth  >= 2 &&
        dims.sourceHeight / dims.destHeight >= 2) {
      timing.mark()
      var imageData = getImageData(canvas, source, width, height)
      timing.mark("GET IMAGE DATA")

      var destImageData = downsample(imageData, dims.destWidth,
        dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth,
        dims.sourceHeight)
      timing.mark("DOWNSCALE")

      canvas = putImageData(canvas, destImageData)

      if (detectSourceType(source) !== "HTMLVideoElement") {
          cache.createSetter(source)([source, imageData]);
      }
    }
    else {
      canvas = resizeWithCanvas(canvas, source, dims.destWidth,
        dims.destHeight, dims.sourceX, dims.sourceY, dims.sourceWidth,
        dims.sourceHeight)
      timing.mark("RESIZE WITH CANVAS")
    }

    produceResult(canvas, options,
    function(result) {
      timing.mark("PRODUCE RESULT")
      resolveResult(result)
      timing.finish()
    })
  }

  var URL = window.URL || window.webkitURL

  switch (detectSourceType(source)) {

    case "File":
      var sourceImg = document.createElement("img")
      timing.mark()
      sourceImg.src = URL.createObjectURL(source)
      timing.mark("READ FILE")
      loadImg(sourceImg,
      function() {
        timing.mark("LOAD IMAGE")
        scaleSourceResolve(sourceImg, sourceImg.naturalWidth,
          sourceImg.naturalHeight)
      })
      break

    case "HTMLImageElement":
      timing.mark()
      loadImg(source,
      function() {
        timing.mark("LOAD IMAGE")
        scaleSourceResolve(source, source.naturalWidth, source.naturalHeight)
      })
      break

    case "HTMLVideoElement":
      loadVideo(source,
      function() {
        scaleSourceResolve(source, source.videoWidth, source.videoHeight)
      })
      break

    case "URL":
      timing.mark()
      setTimeout(function() {
      loadArrayBuffer(source,
      function(arrayBuffer) {
        timing.mark("LOAD ARRAY BUFFER")
        var arrayBufferView = new Uint8Array(arrayBuffer)
        var blob = new Blob( [ arrayBufferView ], { type: "image/jpeg" } )
        var sourceImg = document.createElement("img")
        sourceImg.src = URL.createObjectURL(blob)
        timing.mark()
        loadImg(sourceImg,
        function() {
          timing.mark("LOAD IMAGE")
          scaleSourceResolve(sourceImg, sourceImg.naturalWidth,
            sourceImg.naturalHeight)
        })
      })
      })
      break
  }

  // return result
}
    return downscale
}));


// All customer function

$(function(){
  
  $(".jobs-page.jobs-categories-cell .top-content .open-selected-content").on('click', function(){
    var jobCategoriesCell = $(this).parent().parent();
    jobCategoriesCell.addClass('selected');
  });
  $(".jobs-page.jobs-categories-cell .top-content .btn-close").on('click', function(){
    var jobCategoriesCell = $(this).parent().parent();
    jobCategoriesCell.removeClass('selected');
  });

  var jobCategoryCells = $('.jobs-page.jobs-categories-cell');

  // handle all jobCategoryCell in current page
  jobCategoryCells.each(function(index, jobCategoryCell) {
    var hideExpandSection = $(jobCategoryCell).attr('hideExpandSection');
    if (hideExpandSection === 'true') {
      $(jobCategoryCell).find('.icon-next,.open-selected-content,.selected-content').remove();
    }
  });
  $(".jobs-categories-cell img.video-icon-img").keydown(function(e){
    if(e.which == 13){
      $("video.wrap-all").play();
    }
  });
  
});


// All customer function
$(function() {
  // support for category cell
  $(document).on('click', '.top-content .open-selected-content', function () {
    var jobCategoriesCell = $(this).parent().parent();
    jobCategoriesCell.addClass('selected');
  })
  $(document).on('click', '.top-content .btn-close', function () {
    var jobCategoriesCell = $(this).parent().parent();
    jobCategoriesCell.removeClass('selected');
  })
  $(".img-cell .video-icon img.video-icon-img").keydown(function(e){
    if(e.which == 13){
      $("video.wrap-all").play();
    }
  });
});


// All customer function

$(function(){
  
});


$(function() {
  // handle all quotes carousel in current page
  $(".jobs-page.jobs-quotes-carousel").each(function(index, jobsQuotesCarousel) {
    var autoplayTimeout = $(jobsQuotesCarousel).find('.carousel.owl-carousel').attr('autoplayTimeout');
    if (!autoplayTimeout) {
      autoplayTimeout = 10;
    } else {
      autoplayTimeout = Number(autoplayTimeout)
    }
    var carouselEl = $(jobsQuotesCarousel).find('.carousel.owl-carousel');
    carouselEl.owlCarousel({
      loop:true,
      margin:10,
      items:1,
      nav : false,
      autoplay:true,
      autoplaySpeed: 2500,
      autoplayTimeout:autoplayTimeout*1000,
      autoplayHoverPause:true,
    })
  
    $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .previous").click(function() {
      carouselEl.trigger('prev.owl.carousel');
    });
  
    $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .next").click(function() {
      carouselEl.trigger('next.owl.carousel');
    });

    $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .previous").keydown(function(event) {
      if (event.which === 37 || event.which == 13 || event.which == 32) {
        carouselEl.trigger('prev.owl.carousel');
      }
    });

    $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .next").keydown(function(event) {
      if (event.which === 39 || event.which == 13 || event.which == 32) {
              carouselEl.trigger('next.owl.carousel');
      }
    });
  
    $(jobsQuotesCarousel).find(".carousel.owl-carousel .owl-dots button.owl-dot").attr('title', 'paginate');
    $(jobsQuotesCarousel).find(".carousel.owl-carousel .owl-dots").appendTo($(jobsQuotesCarousel).find(".owl-carousel.custome-nav .dots-container"));

    $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .owl-dots button").keydown(function(event) {
      if (event.which === 39) {
        // next
        carouselEl.trigger('next.owl.carousel');
      } else {
        // previous
        carouselEl.trigger('prev.owl.carousel');
      }
    });
    
    $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .owl-dots button").focus(function() {
      $(jobsQuotesCarousel).find(".owl-carousel.custome-nav .owl-dots button").each(function(index, button) {
        var labeltext = $('.quotes-text').eq(index + 1).text();
        var label = 'Click Page ' + (index + 1) + ' button for ' +labeltext;
        $(button).removeAttr("title").attr('aria-label', label);
      });
    });

    $(jobsQuotesCarousel).find(".carousel.owl-carousel .owl-nav.disabled").remove();

    var isPlaying = true;
    var playButton = $('.carousel-play-pause-button'); 
    var playbtn = $('.carousel-play-pause-button').text();
    if (playbtn == "Pause"){
      $(".carousel-play-pause-button").attr('aria-label','Click Pause button to freeze carousel for few minutes');
    }else if(playbtn == "Play"){
      $(".carousel-play-pause-button").attr('aria-label','Click Play button to play carousel');
    } 
    playButton.on('click',function(){
      if(isPlaying){
        carouselEl.trigger('stop.owl.autoplay');
        playButton.html("Play")
        isPlaying = false;
        
      } else {
        carouselEl.trigger('play.owl.autoplay',[5000]);
        playButton.html("Pause")
        isPlaying = true;
       
      }

    });

  });
});


// All customer function

$(function(){

  // var twitterLink = $('.jobs-movements-list-item .twitter-link');
  // twitterLink.each(function(index, item_row) {
  //   var link = $(item_row).attr('href');
  //   var ids = link.match(/https?:\/\/(www\.)?twitter\.com\/(#!\/)?@?([^\/]*)/);
  //   var id = '';
  //   if (ids && ids.length > 3) {
  //     id = ids[3];
  //   }
  //   $(item_row).find('.twitter-id').html('@' + id);
  // });



    var twitterLink = $('.jobs-movements-list-item .twitter-link');
    twitterLink.each(function(index, item_row) {
      var link = $(item_row).attr('href');
   
  
      if($('.jobs-movements-list-item').eq(index).find('.ctalink').attr('href') == ''){
        $('.jobs-movements-list-item').eq(index).find('.ctalink').removeAttr('href');
      }
      if($('.jobs-movements-list-item').eq(index).find('.ctalink').html() == ''){
        $('.jobs-movements-list-item').eq(index).find('.ctalink').css('display','none');
      }
  
      if($('.jobs-movements-list-item').eq(index).find('.twitter-link').attr('href') == ''){
        $('.jobs-movements-list-item').eq(index).find('.twitter-link').css('display','none');
       
      }else{
        $(item_row).attr('href','http://twitter.com/'+link);
        $(item_row).find('.twitter-id').html('@' + link);
        //$('.jobs-movements-list-item').eq(index).find('.twitter-link').css('display','none');
      }
     
    });

});


// All customer function
$(function(){
  var jobsPaginationVideos = $(".jobs-page.jobs-pagination-video");
  // handle all pagination video in current page
  jobsPaginationVideos.each(function(index, jobsPaginationVideo) {
    $(jobsPaginationVideo).find('script').appendTo("head");
    $(jobsPaginationVideo).find('link').appendTo("head");
    $(jobsPaginationVideo).find('script').remove();
    $(jobsPaginationVideo).find('link').remove();

    // clone all child item to carousel
    var itemsContainer = $(jobsPaginationVideo).find('.column-video-container').children("div");
    var itemsContainerClone = itemsContainer.clone();
    $(jobsPaginationVideo).find('.carousel-container .carousel').append(itemsContainerClone);


    var autoplayTimeout = $(jobsPaginationVideo).find('.carousel.owl-carousel').attr('autoplayTimeout');
    if (!autoplayTimeout) {
      autoplayTimeout = 10;
    } else {
      autoplayTimeout = Number(autoplayTimeout)
    }
    var carouselEl = $(jobsPaginationVideo).find('.carousel.owl-carousel');
    carouselEl.owlCarousel({
      loop:true,
      nav:false,
      dotsEach: 1,
      responsive: {
        0:{
          items:1,
          margin:0,
        },
        376:{
          items:2,
          margin:20,
        },
        1025:{
          items:3,
          margin:40,
        }
      },
      autoplay:false,
      autoplayTimeout:autoplayTimeout*1000,
    })
  
    $(jobsPaginationVideo).find(".owl-carousel.custome-nav .previous").click(function() {
      carouselEl.trigger('prev.owl.carousel');
    });
  
    $(jobsPaginationVideo).find(".owl-carousel.custome-nav .next").click(function() {
      carouselEl.trigger('next.owl.carousel');
    });
    $(jobsPaginationVideo).find(".owl-carousel.custome-nav .previous").keydown(function(event) {
      if (event.which === 37 || event.which == 13 || event.which == 32) {
        carouselEl.trigger('prev.owl.carousel');
      }
    });

    $(jobsPaginationVideo).find(".owl-carousel.custome-nav .next").keydown(function(event) {
      if (event.which === 39 || event.which == 13 || event.which == 32) {
              carouselEl.trigger('next.owl.carousel');
      }
    });
  
    $(jobsPaginationVideo).find(".carousel.owl-carousel .owl-dots button.owl-dot").attr('title', 'dot');
    $(jobsPaginationVideo).find(".carousel.owl-carousel .owl-dots").appendTo($(jobsPaginationVideo).find(".owl-carousel.custome-nav .dots-container"));

    $(jobsPaginationVideo).find(".carousel.owl-carousel .owl-dots button").each(function(index, button) {
      var label = 'Page ' + (index + 1);
      $(button).removeAttr("title").attr('aria-label', label);
    });

    $(jobsPaginationVideo).find(".carousel.owl-carousel .owl-nav.disabled").remove();
  });
  
})


// All customer function

$(function(){
  $( ".jobs-quick-links" ).hover(function() {
    $('.page-preload').removeClass('page-preload');
  });
});


// All customer function

$(function(){
  var jobsListItems = $('.jobs-list-item');
  jobsListItems.each(function(index, item_row) {
    var listStyle = $(item_row).attr('listStyle');
    if (listStyle === 'Yellow Dot') {
      $(item_row).addClass('style-dot style-dot-yellow');
    } else if (listStyle === 'Orange Dot') {
      $(item_row).addClass('style-dot style-dot-orange');
    } else if (listStyle === 'Red Dot') {
      $(item_row).addClass('style-dot style-dot-red');
    } else if (listStyle === 'Purple Dot') {
      $(item_row).addClass('style-dot style-dot-purple');
    } else if (listStyle === 'White Check') {
      $(item_row).addClass('style-white-check');
    }
  });
});


// All customer function

$(function(){

  var text = $('.jobs-benefit-cell .benefit-cell-text');
  $('.jobs-benefit-cell .benefit-cell-img').attr('alt','');
  text.each(function(index, item_row) {
    var textAlign = $(item_row).attr('textAlign');
    if (textAlign === 'center' || textAlign === 'right') {
      $(item_row).css("text-align", textAlign);
    }
  });

});


// All customer function

$(function(){
  var UID = {
    _current: 0,
    getNew: function(){
      this._current++;
      return this._current;
    }
  };
  
  HTMLElement.prototype.pseudoStyle = function(element,prop,value){
    var _this = this;
    var _sheetId = "pseudoStyles";
    var _head = document.head || document.getElementsByTagName('head')[0];
    var _sheet = document.getElementById(_sheetId) || document.createElement('style');
    _sheet.id = _sheetId;
    var className = "pseudoStyle" + UID.getNew();
    
    _this.className +=  " "+className; 
    
    _sheet.innerHTML += " ."+className+":"+element+"{"+prop+":"+value+"}";
    _head.appendChild(_sheet);
    return this;
  };


  var jobsMilitaryCellContent = $('.jobs-military-cell .content-container');
  jobsMilitaryCellContent.each(function(index, item_row) {
    var backgroundColor = $(item_row).attr('backgroundColor');
    $(item_row).css("background", backgroundColor);

    var div = $(item_row).find('.description')[0];
    div.pseudoStyle("after","background",backgroundColor);

  });
});


// All customer function

$(function(){
});


// All customer function

$(function(){
  
  $(".jobs-page.jobs-categories-cell .top-content .open-selected-content").on('click', function(){
    var jobCategoriesCell = $(this).parent().parent();
    jobCategoriesCell.addClass('selected');
  });
  $(".jobs-page.jobs-categories-cell .top-content .btn-close").on('click', function(){
    var jobCategoriesCell = $(this).parent().parent();
    jobCategoriesCell.removeClass('selected');
  });

  var jobCategoryCells = $('.jobs-page.jobs-categories-cell');

  // handle all jobCategoryCell in current page
  jobCategoryCells.each(function(index, jobCategoryCell) {
    var hideExpandSection = $(jobCategoryCell).attr('hideExpandSection');
    if (hideExpandSection === 'true') {
      $(jobCategoryCell).find('.icon-next,.open-selected-content,.selected-content').remove();
    }
  });
  $(".jobs-categories-cell img.video-icon-img").keydown(function(e){
    if(e.which == 13){
      $("video.wrap-all").play();
    }
  });
});


// All customer function
$(function(){
  var jobsCarousels = $(".jobs-page.jobs-carousel");
  // handle all carousel in current page
  jobsCarousels.each(function(index, jobsCarousel) {
    $(jobsCarousel).find('script').appendTo("head");
    $(jobsCarousel).find('link').appendTo("head");
    $(jobsCarousel).find('script').remove();
    $(jobsCarousel).find('link').remove();

    var numberOfCellInMobile = $(jobsCarousel).attr('numberOfCellInMobile');
    var numberOfCellInNearMobile = $(jobsCarousel).attr('numberOfCellInNearMobile');
    var numberOfCellInTablet = $(jobsCarousel).attr('numberOfCellInTablet');
    var numberOfCellInDesktop = $(jobsCarousel).attr('numberOfCellInDesktop');

    if (numberOfCellInMobile === undefined) {
      numberOfCellInMobile = 1;
    }
    if (numberOfCellInNearMobile === undefined) {
      numberOfCellInNearMobile = 1;
    }
    if (numberOfCellInTablet === undefined) {
      numberOfCellInTablet = 1;
    }
    if (numberOfCellInDesktop === undefined) {
      numberOfCellInDesktop = 1;
    }
  
    var autoplayTimeout = $(jobsCarousel).find('.carousel.owl-carousel').attr('autoplayTimeout');
    if (!autoplayTimeout) {
      autoplayTimeout = 10;
    } else {
      autoplayTimeout = Number(autoplayTimeout)
    }
    var carouselEl = $(jobsCarousel).find('.carousel.owl-carousel');
    carouselEl.owlCarousel({
      loop:true,
      margin:10,
      nav : false,
      responsive: {
        0:{
          items:numberOfCellInMobile,
          margin:0,
        },
        375:{
          items:numberOfCellInNearMobile,
          margin:20,
        },
        575:{
          items:numberOfCellInTablet,
          margin:40,
        },
        768:{
          items:numberOfCellInDesktop,
          margin:40,
        }
      },
      autoplay:true,
      autoplayTimeout:autoplayTimeout*1000,
      autoplayHoverPause:true,
    })
  
    $(jobsCarousel).find(".owl-carousel.custome-nav .previous").click(function() {
      carouselEl.trigger('prev.owl.carousel');
    });
  
    $(jobsCarousel).find(".owl-carousel.custome-nav .next").click(function() {
      carouselEl.trigger('next.owl.carousel');
    });
  
    $(jobsCarousel).find(".carousel.owl-carousel .owl-dots button.owl-dot").attr('title', 'dot');
    $(jobsCarousel).find(".carousel.owl-carousel .owl-dots").appendTo($(jobsCarousel).find(".owl-carousel.custome-nav .dots-container"));

    $(jobsCarousel).find(".carousel.owl-carousel .owl-dots button").each(function(index, button) {
      var label = 'Page ' + (index + 1);
      $(button).removeAttr("title").attr('aria-label', label);
    });

    $(jobsCarousel).find(".carousel.owl-carousel .owl-nav.disabled").remove();
  });
  
})



// All customer function

$(function(){
  var slugsBK = {};
  // handle all search bars in current page
  $(".jobs-page.jobs-search-bar").each(function(index, jobsSearchBarSelector) {
    var jobsSearchBar = $(jobsSearchBarSelector);
    var isSearchPage = false;
    var type = $(jobsSearchBar).attr("type");
    var api = $(jobsSearchBar).attr("api");
    jobsSearchBar.removeClass("type-two-parameters");

    var searchPageUrl = '';
    searchPageUrl= $(jobsSearchBar).attr("searchPageUrl");
    searchPageUrl += '/external';
   /* $('nav.jobs-header').on("userLoginChecked", function(event, showName){
      if ($.isloggedin && $.isloggedin()) {
        searchPageUrl += '/internal';
      } else {
        searchPageUrl += '/external';
      }
    });*/

    if (type === "Two parameters") {
      jobsSearchBar.addClass("type-two-parameters");
      jobsSearchBar.find('.all-parameters').remove();
    } else  {
      jobsSearchBar.addClass("type-all-parameters");
      jobsSearchBar.find('.two-parameters').remove();
    }

    // init params
    var totalResults = 0;
    var currentPageIndex = 1;
    var itemsEachPage = 10;
    var isGettingJobs = false;
    var currentGettingJobsRequest;
    var jobsSearchResult = $(".jobs-page.jobs-search-result#fake-jobsearch-result");
    var resultId = jobsSearchBar.attr('resultId');
    if (resultId) {
      jobsSearchResult = $(".jobs-page.jobs-search-result#" + resultId);
      if (jobsSearchResult.length > 0) {
        isSearchPage = true;
      }
    }
    var needToSearch = false;
    var jobSearchParam = {
      keywords: '',
      location: '',
      category: '',
      job_type: '',
    };

    // var countryMapping = {
    //   "US": "United States",
    //   "IN": "India"
    // }

    // get param from previous page via url
    var previousQuery = getUrlParameter(null, 'keywords');
    var previousLocation = getUrlParameter(null, 'location');
    var previousCategory = getUrlParameter(null, 'category');
    var previousJobType = getUrlParameter(null, 'job_type');
    if (previousQuery) {
      jobSearchParam.keywords = previousQuery;
      jobsSearchBar.find('.search-param-container.search-param-search-container input:visible').val(previousQuery);
    }
    if (previousLocation) {
      jobSearchParam.location = previousLocation;
      jobsSearchBar.find('.search-param-container.search-param-location-container input:visible').val(previousLocation);
    }
    if (previousCategory) {
      jobSearchParam.category = previousCategory;
      jobsSearchBar.find('.search-param-container.search-param-team-container .dropdown-value-display').html(previousCategory);
      jobsSearchBar.find('.search-param-container.search-param-team-container .dropdown-value-display').attr('value', previousCategory);
    }
    if (previousJobType) {
      jobSearchParam.job_type = previousJobType;
      jobsSearchBar.find('.search-param-container.search-param-job-type-container .dropdown-value-display').html(previousJobType);
      jobsSearchBar.find('.search-param-container.search-param-job-type-container .dropdown-value-display').attr('value', previousJobType);
    }

    // handle more search button click event
    jobsSearchBar.find('.more-search-button').click(function (event) {
      var searchBarContent = $(this).parents('.job-search-bar-content');
      if (searchBarContent.hasClass('reduce')) {
        searchBarContent.removeClass('reduce');
        $(this).html('Less Search Criteria');
      } else {
        searchBarContent.addClass('reduce');
        $(this).html('More Search Criteria');
      }
      event.preventDefault();
    });

    // show all loading in search bar
    function showLoadingSearchBar() {
      jobsSearchBar.find(".loading-indicator").removeClass('hide');
    }

    // hide all loading in search bar
    function hideLoadingSearchBar() {
      jobsSearchBar.find(".loading-indicator").addClass('hide');
    }

    // show all loading in search result
    function showLoadingSearchResult() {
      jobsSearchResult.find(".paging-ui").addClass('disabled');
      jobsSearchResult.find(".loading-more-items").removeClass('hide');
      if (!jobsSearchResult.find('.loading-more-items').is(":visible")) {
        jobsSearchResult.find(".loading-indicator").removeClass('hide');
      }
    }

    // hide all loading in search result
    function hideLoadingSearchResult() {
      jobsSearchResult.find(".loading-indicator").addClass('hide');
      jobsSearchResult.find(".paging-ui").removeClass('disabled');
      jobsSearchResult.find(".loading-more-items").removeClass('hide');
    }

    // update search param and force update list item if need
    function updateSearchParams(shouldResetPageIndex, shouldRemoveOld, forceSearch) {
      var shouldReloadUI = false;
      var isAllParamsEmpty = true;
      var newQuery = jobsSearchBar.find('.search-param-container.search-param-search-container input:visible').val();
      if (jobSearchParam.keywords != newQuery) {
        jobSearchParam.keywords = newQuery;
        shouldReloadUI = true;
      }
      if (newQuery) {
        isAllParamsEmpty = false;
      }
      var locationSearchField = jobsSearchBar.find('.search-param-container.search-param-location-container input:visible');
      if (locationSearchField.length > 0) {
        var newLocation = locationSearchField.val();
        if (locationSearchField.html() === 'Any Country' || locationSearchField.html() === 'Current Location') {
          newLocation = '';
        }
        if (jobSearchParam.location !== newLocation) {
          jobSearchParam.location = newLocation;
          shouldReloadUI = true;
        }
        if (newLocation) {
          isAllParamsEmpty = false;
        }
      }
      var newTeamSearchField = jobsSearchBar.find('.team-param.search-param-team-container .dropdown-value-display:visible');
      if (newTeamSearchField.length > 0) {
        var newTeam = newTeamSearchField.html();
        if (newTeam === 'Any Teams') {
          newTeam = '';
        }
        if (jobSearchParam.category !== newTeam) {
          jobSearchParam.category = newTeam;
          shouldReloadUI = true;
        }
        if (newTeam) {
          isAllParamsEmpty = false;
        }
      }
      var newJobTypeSearchField = jobsSearchBar.find('.search-param-job-type-container.search-param-container .dropdown-value-display:visible');
      if (newJobTypeSearchField.length > 0) {
        var newJobType = newJobTypeSearchField.html();
        if (newJobType === 'Any Job Type') {
          newJobType = '';
        }
        if (jobSearchParam.job_type !== newJobType) {
          jobSearchParam.job_type = newJobType;
          shouldReloadUI = true;
        }
        if (newJobType) {
          isAllParamsEmpty = false;
        }
      }
      
      if (isAllParamsEmpty) {
        jobsSearchBar.find('.go-btn').addClass('disabled');
        jobsSearchBar.find('.go-btn a').attr('tabindex','-1');
      } else {
        jobsSearchBar.find('.go-btn').removeClass('disabled');
        jobsSearchBar.find('.go-btn a').attr('tabindex','0');
      }

      var isHaveGoBtn = false;
      var goBtns = jobsSearchBar.find('.go-btn:visible');
      goBtns.each(function(index, goBtn) {
        if ($(goBtn).css('display') !== 'none') {
          isHaveGoBtn = true;
        }
      });
      if (isAllParamsEmpty) {
        jobsSearchResult.find(".loading-more-items").addClass('hide');
      }
      if (((shouldReloadUI && !isHaveGoBtn) || forceSearch) && !isAllParamsEmpty) {
        if (shouldResetPageIndex) {
          currentPageIndex = 1;
        }
        updatePagingUI();
        searchJobs(shouldRemoveOld, true);
        return true;
      }
      return false;
    }

    function searchButtonClicked() {
      if (!isSearchPage) {
        updateSearchParams(true, false, false);
        var newUrl = "";
        var params = "";
        if (jobSearchParam.keywords) {
          params += "&keywords=" + jobSearchParam.keywords;
        }
        if (jobSearchParam.location) {
          params += "&location=" + jobSearchParam.location;
        }
        if (jobSearchParam.category) {
          params += "&category=" + jobSearchParam.category;
        }
        if (jobSearchParam.job_type) {
          params += "&job_type=" + jobSearchParam.job_type;
        }
        if (params) {
          params = params.substr(1);
          newUrl = searchPageUrl + "?" + params;
        }
        window.location.href = newUrl;
      } else {
        abortSearchJobsRequest();
        updateSearchParams(true, true, true);
      }
    }

    // handle go button click
    jobsSearchBar.find('.go-btn').click (function (event) {
      searchButtonClicked();
    });

    // handle dropdown item clicked
    function handleDropdownEvent() {
      jobsSearchResult.find(".dropdown a").click(function (event) {
        var dropdown = $(this).parents('.dropdown');
        dropdown.find('.dropdown-value-display').attr('value', $(this).attr('value'));
        dropdown.find('.dropdown-value-display').html($(this).html());
        if (dropdown.hasClass('dropdown-item-each-page')) {
          itemsEachPage = parseInt($(this).html());
          updatePagingUI();
          updateSearchParams(true, true, true);
        }
      });

      jobsSearchBar.find('.dropdown a').click(function (event) {
        var dropdown = $(this).parents('.dropdown');
        dropdown.find('.dropdown-value-display').attr('value', $(this).attr('value'));
        dropdown.find('.dropdown-value-display').html($(this).html());
        updateSearchParams(true, true, false);
      });
    }

    // handle input text
    jobsSearchBar.find('.search-param-container.search-param-search-container input, .search-param-container.search-param-location-container input').on("input", function() {
      updateSearchParams(true, true, false);
    }).keydown(function (e) {
      var keyCode = e.keyCode || e.which;
      if (keyCode === 13) {
        var goBtnLink = jobsSearchBar.find('.go-btn:visible a')
        goBtnLink.first().attr("tabindex", 1).focus();
        if (goBtnLink.length > 0) {
          searchButtonClicked();
        }

      }
    });

    /**
     * add object to current dropdown list
     * @param {*} dropdownMenu : dropdown menu ui
     * @param {*} objects : data
     */
    function addObjectToDropdownList(dropdownMenu, objects) {
      dropdownMenu.each(function(index, dropdown_menu) {
        var dropdownItem = $(dropdown_menu).find('a.dropdown-item.hide');
        objects.forEach(function (object, index) {
          var new_row = dropdownItem.clone().removeClass("hide").addClass("copied");
          new_row.attr('value', object[0]);
          new_row.html(object[0]);
          $(dropdown_menu).append(new_row);
        });
      });
    }

    // update ui for paging
    function  updatePagingUI() {
      var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
      var endValue = itemsEachPage + (currentPageIndex-1) * itemsEachPage;
      if (endValue >= totalResults) {
        endValue = totalResults;
        jobsSearchResult.find('.paging-ui .next-btn').addClass('disabled');
      } else {
        jobsSearchResult.find('.paging-ui .next-btn').removeClass('disabled');
      }
      if (currentPageIndex === 1) {
        jobsSearchResult.find('.paging-ui .previous-btn').addClass('disabled');
      } else {
        jobsSearchResult.find('.paging-ui .previous-btn').removeClass('disabled');
      }
      jobsSearchResult.find('.page-ui-page-number').html(startValue + '-' + endValue + ' of ' + totalResults);
    }

    // check if user scroll to bottom
    function checkForScrollBottom(scrollView) {
      var elem = jobsSearchResult.find('.loading-more-items');
      if (elem.length === 0) {
        return;
      }
      if (isElementInViewport(elem) && !elem.hasClass('hide') && elem.is(":visible")) {
        if (!isGettingJobs) {
          nextPage(false);
        }
      } else if (!elem.is(":visible")) {
        var table_items = jobsSearchResult.find('.table-item.copied');
        var length = table_items.length;
        table_items.each(function(index, table_item) {
          if (index < length - itemsEachPage ) {
            table_item.remove();
          }
        });
      }
    }
    // handle scroll event
    function handleScroll(scrollView) {
      scrollView.scroll(function (event) {
        checkForScrollBottom($(this));
      });
      checkForScrollBottom(scrollView);
    }
    // if we are in search page
    if (isSearchPage) {
      handleScroll($('.wrapper-container'));
      handleScroll($('body'));
    }

    /**
     * go to next page
     * @param {*} shouldRemoveOld : should clean current ui on screen
     */
    function nextPage(shouldRemoveOld) {
      var oldCurrentPageIndex = currentPageIndex;
      currentPageIndex += 1;
      var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
      if (startValue > totalResults) {
        currentPageIndex -= 1;
      } else {
        if (!updateSearchParams(false, shouldRemoveOld, true)) {
          currentPageIndex = oldCurrentPageIndex;
        }
        updatePagingUI();
      }
    }

    // next paging button clicked
    jobsSearchResult.find('.paging-ui .next-btn').click(function (event) {
      nextPage(true);
    });
    // previous button page clicked
    jobsSearchResult.find('.paging-ui .previous-btn').click(function (event) {
      var oldCurrentPageIndex = currentPageIndex;
      currentPageIndex -= 1;
      if (currentPageIndex < 1) {
        currentPageIndex = 1;
      } else {
        if (!updateSearchParams(false, true, true)) {
          currentPageIndex = oldCurrentPageIndex;
        }
        updatePagingUI();
      }
    });

    /**
     * update result for one cell
     * @param {*} result : result object
     * @param {*} row : ui object
     */
    function updateOneResultSeach(result, row) {
      if (row.find('.item-refnumber').length > 0) {
        row.find('.item-refnumber').html(result['refnumber']);
        var contact = JSON.parse(result['contact']);
        row.find('.item-lead-recruiter').html(contact.firstname + ' ' + contact.lastname);
        row.find('.item-location').html(result['all_locations']);

        var dateString = result['pub_date'];
        moment().format();
        var date = moment(dateString);
        var dateResult = date.format('MMMM dd,YYYY');
        row.find('.item-date-posted').html(dateResult);
      }
    }
    /**
     * update ui from search result
     * @param {*} results : result from api
     */
    function showResultsSearch(results) {
      var tableItem = jobsSearchResult.find('.table-item.hide');
      results.forEach(function (object, index) {
        var new_row = tableItem.clone().removeClass("hide").addClass("copied");
        new_row.find('.item-industry-code').html(object['industrycode']);
        new_row.find('.item-title').html(object['title']);
        new_row.insertBefore( jobsSearchResult.find('.jobs-search-result-content > .loading-indicator') );

        if (slugsBK[object['slug']]) {
          updateOneResultSeach(slugsBK[object['slug']], new_row);
        } else if (api) {
          jobsSearchResult.find('.table-fail-message').addClass('hide');
          function requestFail() {
            row.find('.item-refnumber').html('');
            new_row.find('.item-lead-recruiter').html('');
            new_row.find('.item-location').html('');
            new_row.find('.item-date-posted').html('');
            jobsSearchResult.find('.table-fail-message').removeClass('hide');
          }
          $.post(api + '/Static/JobDetail', {slug: object['slug']}, function (result) {
            if (result.success && result.data && result.data['slug']) {
              slugsBK[result.data['slug']] = result.data;
              updateOneResultSeach(result.data, new_row);
            } else {
              requestFail();
            }
          })
          .fail(function(response) {
            requestFail();
          });
        }
      });
    }
    function abortSearchJobsRequest() {
      if (currentGettingJobsRequest) {
        currentGettingJobsRequest.abort();
        currentGettingJobsRequest = null;
      }
      isGettingJobs = false;
      hideLoadingSearchResult();
    }
    /**
     * calling search jobs api then update ui
     * @param {*} shouldRemoveOld : should remove old ui on screen
     */
    function searchJobs(shouldRemoveOld) {
      if (isGettingJobs || !api) {
        needToSearch = true;
        return;
      }
      showLoadingSearchResult();
      isGettingJobs = true;

      var params = {limit: itemsEachPage, page: currentPageIndex};
      for (var attrname in jobSearchParam) { params[attrname] = jobSearchParam[attrname]; }
      jobsSearchResult.find('.table-fail-message').addClass('hide');
      if (shouldRemoveOld) {
        jobsSearchResult.find('.table-item.copied').remove();
      }
      function requestFail() {
        hideLoadingSearchResult();
        updatePagingUI();
        isGettingJobs = false;
        needToSearch = false;
        jobsSearchResult.find('.table-fail-message').removeClass('hide');
        jobsSearchResult.find(".loading-more-items").addClass('hide');
        currentGettingJobsRequest = null;
      }
      currentGettingJobsRequest= $.post(api + '/Static/JobSearch', params, function (result) {
        var data = result.data;
        if (!result.success || !data || !data.facets || !data.facets.fields ) {
          requestFail();
          return;
        }
        var objects = data.objects;
        if (objects) {
          showResultsSearch(objects);
        }

        jobsSearchResult.find(".num-result").html(numberWithCommas(data.meta.total_count) + ' RESULTS');
        totalResults = data.meta.total_count;
        updatePagingUI();
        isGettingJobs = false;
        hideLoadingSearchResult();
        if (needToSearch) {
          searchJobs(shouldRemoveOld);
          needToSearch = false;
        }
        currentGettingJobsRequest = null;
        if (totalResults === 0) {
          jobsSearchResult.find(".loading-more-items").addClass('hide');
        }
      })
      .fail(function(response) {
        requestFail();
      });
    }

    if (api) {
      // retrive all dropdown param
      showLoadingSearchBar();
      var params = {limit: 10, page: 1};
      jobsSearchResult.find('.table-fail-message').addClass('hide');
      function requestFail() {
        hideLoadingSearchBar();
        handleDropdownEvent();
        isGettingJobs = false;
        jobsSearchResult.find('.table-fail-message').removeClass('hide');
      }
      $.post(api + '/Static/JobSearch', params, function (result) {
        var data = result.data;
        if (!result.success || !data || !data.facets || !data.facets.fields ) {
          requestFail();
          return;
        }
        var fields = data.facets.fields;
        // var countries = fields.country;
        // if (countries) {
        //   jobsSearchBar.find(".search-param-location-container .dropdown-menu").each(function(index, dropdown_menu) {
        //     var dropdownItem = $(dropdown_menu).find('a.dropdown-item.hide');
        //     countries.forEach(function (country, index) {
        //       var new_row = dropdownItem.clone().removeClass("hide").addClass("copied");
        //       new_row.attr('value', country[0]);
        //       new_row.html(country[0]);
        //       $(dropdown_menu).append(new_row);
        //     });
        //   });
        // }
        var teams = fields.teams;
        if (teams) {
          addObjectToDropdownList(jobsSearchBar.find(".search-param-team-container .dropdown-menu"), teams);
        }
        var job_status = fields.job_status;
        if (job_status) {
          addObjectToDropdownList(jobsSearchBar.find(".search-param-job-type-container .dropdown-menu"), job_status);
        }
  
        hideLoadingSearchBar();
        handleDropdownEvent();
        isGettingJobs = false;
      })
      .fail(function(response) {
        requestFail();
      });
      updatePagingUI();
      handleDropdownEvent();
      updateSearchParams(true, true, true);
    }
  });

});


// All customer function

$(function(){

  function selectTab(panelTab, index, selectedItem) {
    var tabContent = panelTab.find('.tab-content');
    tabContent.children().addClass('hide');
    tabContent.children('.tab-content' + index).removeClass('hide');
    panelTab.find('.tab-item-index').css('border-bottom', 'none');
    var borderColor = panelTab.attr('borderBottomColor');
    panelTab.find('.tab-item-index' + index).css('border-bottom', '5px solid ' + borderColor);
  }

  var tabBar = $('.jobs-page.jobs-panel-tab .tab-header');
  tabBar.each(function(index1, item_row1) {
    var tabItem = $(item_row1).find('span');
    tabItem.each(function(index2, item_row2) {
      var panelTab = $(this).parent().parent();
      var borderColor = panelTab.attr('borderBottomColor');
      if (index2 === 0) {
        $(item_row2).css('border-bottom', '5px solid ' + borderColor );
      }

      var div = $(item_row2)[0];
      div.pseudoStyle("hover","border-bottom", '5px solid ' + borderColor + ' !important');
      $(item_row2).addClass('tab-item-index');
      $(item_row2).addClass('tab-item-index' + index2);
      $(item_row2).on('click', function(){
        var panelTab = $(this).parent().parent();
        selectTab(panelTab, index2, $(this));
      });
    });
  });

  var tabContentList = $('.jobs-page.jobs-panel-tab .tab-content');
  tabContentList.each(function(index1, item_row1) {
    $(item_row1).children('script').remove();
    $(item_row1).children('link').remove();
    var tabContents = $(item_row1).children();
    tabContents.each(function(index2, item_row2) {
      $(item_row2).addClass('tab-content' + index2);
      if (index2 !== 0) {
        $(item_row2).addClass('hide');
      }
    });
  });
  
});


// All customer function

$(function(){
  var jobsGrid = $('.jobs-grid');
  jobsGrid.each(function(index, item_row) {
    var borderBottomColor = $(item_row).attr('borderBottomColor');
    $(item_row).css("border-bottom-color", borderBottomColor);

    var hoverLink = $(item_row).find('.hover-link');
    if (hoverLink.attr('href')) {
      $(item_row).find('a:not(.hover-link)').removeAttr("href");
    }
  });
  $("span.job-grid-seeopurtunities").keydown(function(event){
    if(event.which==13){
      $(this).trigger("click");
    }
  });
});


// All customer function

$(function(){
  var jobsHorizontalRule = $('.jobs-horizontal-rule .color-bar');
  jobsHorizontalRule.each(function(index, item_row) {
    var lineColor = $(item_row).attr('line-color');
    $(item_row).css('background', lineColor);
  });

  $(".jobs-horizontal-rule").each(function(index, item_row) {
    var title = $(item_row).find('.title').html();
    if (!title) {
      var parent = $(item_row).parent();
      if (parent.hasClass('cmp-region')) {
        parent.remove();
      } else {
        $(item_row).remove();
      }
    }
  });

});



// All customer function
$(function(){

  $(".video__wrapper").on('click touchstart', function(){
    $(this).parent('.video-container').find(".all-detail").addClass("hide");
    $(this).parent('.video-container').find(".mask").addClass("hide");
    $(this).parent('.video-container').addClass("borderhide");
  });
 

  $('.jobs-page.jobs-video script, .jobs-page.jobs-video link').appendTo("head");
  $(".imagealt").attr("alt","");
  $(".imagealt").attr("role","presentation");
  var getYoutubeIdByUrl = function( url ){
    if (!url) {
      return "";
    }
    var clearUrl = url.trim();
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
    var match = clearUrl.match(regExp);
    var youtubeId = (match&&match[7].length==11)? match[7] : false;
    if (!youtubeId) {
      regExp = /^.*(youtu\.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/;
      match = clearUrl.match(regExp);
      if (match && match[2].length == 11) {
        return match[2];
      } else {
        return false;
      }
    } else {
      return youtubeId;
    }
  };

  var getVimeoIdByUrl = function( url ){
    if (!url) {
      return "";
    }
    var clearUrl = url.trim();
    var vimeo_Reg = /https?:\/\/(?:www\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^\/]*)\/videos\/|album\/(\d+)\/video\/|)(\d+)(?:$|\/|\?)/;
    var match = clearUrl.match(vimeo_Reg);
  
    if (match && match.length > 3){
      return match[3];
    }else{
      return "";
    }
  };

  var getVideoSourceByUrl = function( url ){
    if (!url) {
      return "";
    }
    var clearUrl = url.trim();
    if (clearUrl.indexOf('mp4') !== -1) {
      return clearUrl;
    }
    return '';
  };

  var videoContainer = $('.jobs-video .video-container');
  videoContainer.each(function(index, item_row) {
    var borderBottomColor = $(item_row).attr('borderBottomColor');
    if (borderBottomColor.toLowerCase() === 'colorful') {
      $(item_row).addClass('colorful');
      $(item_row).css("border", "none");
    } else if (borderBottomColor) {
      $(item_row).find('.mask').css('bottom', 0);
      $(item_row).css("border-bottom-color", borderBottomColor);
    } else {
      $(item_row).css("border", "none");
    }
  });

  $(document).keyup(function(e) {
    if (e.key === "Escape") {
      $('.modal-video-close-btn').click();
    }
  });
  
  var videoLink = $('.jobs-video .youtube-link');
  videoLink.each(function(index, item_row) {
    
    if ($(item_row).hasClass('done')) {
      return;
    }
    $(item_row).addClass('done');

    var videoUrl = $(item_row).attr('data-video');
    var sourceDataVideo = $(item_row).attr('source-data-video');
    var videoContainer = $(item_row).parent().find('#vidBox');
    if (videoUrl || sourceDataVideo) {
      var youtubeId = getYoutubeIdByUrl(videoUrl);
      if (!youtubeId) {
        youtubeId = getYoutubeIdByUrl(sourceDataVideo);
      }
      var vimeoId = getVimeoIdByUrl(videoUrl);
      if (!vimeoId) {
        vimeoId = getVimeoIdByUrl(sourceDataVideo);
      }
      var videoDirectUrl = getVideoSourceByUrl(videoUrl);
      if (!videoDirectUrl) {
        videoDirectUrl = getVideoSourceByUrl(sourceDataVideo);
      }
      if (youtubeId) {
        $(item_row).attr('data-video-id', youtubeId);
        $(item_row).modalVideo();
        videoContainer.remove();
      } else if (vimeoId) {
        $(item_row).attr('data-video-id', vimeoId);
        $(item_row).modalVideo({
          channel:'vimeo'
        });
        videoContainer.remove();
      } else if (videoDirectUrl) {
        videoContainer.removeClass('hide');
        var openerId = 'video' + index;
        var videoId = 'v' + index;
        var videoContainerId = 'vidBox' + index;
        $('body').append(videoContainer);
        videoContainer.attr('id', videoContainerId);
        videoContainer.find('video').attr('id', videoId);
        $(item_row).attr('id', openerId);
        videoContainer.VideoPopUp({
          backgroundColor: "rgba(0,0,0,0.5)",
          opener: openerId,
          idvideo: videoId,
          pausevideo: false,
          videoUrl: videoDirectUrl,
        });
      } else {
        videoContainer.remove();
      }
      $(item_row).keyup(function( e ) {
        if (e.key === "Escape") {
          $('.modal-video-close-btn').click();
        }
      });
      $(item_row).click(function() {
        var videoCloseButton = $('.modal-video-close-btn');
        videoCloseButton.attr('tabindex', "1");
        videoCloseButton.focus();
        $('.modal-video-close-btn').keydown(function( event ) {
          if (event.which === 27) {
            $(this).click();
          }
        });
      });
    } else {
      videoContainer.remove();
      $(item_row).removeClass('clickable');
      $(item_row).css('cursor', 'default');
      $(item_row).find('img').remove();
      if ($(item_row).parent().find('a.redirect-url').attr('href')) {
        $(item_row).remove();
      }
    }
  });


  var jobVideo = $('.jobs-video');
  jobVideo.each(function(index, item_row) {
    var size = $(item_row).attr('size');
    var mask = $(item_row).attr('mask');
    var showNextButton = $(item_row).attr('show-next-button');
    if (showNextButton === 'true') {
      $(item_row).addClass('video-has-link');
    } else {
      $(item_row).find('.cell-next-icon').remove();
    }
    jobVideo.find('.remove-if-empty-link-child').each(function(index, linkParent) {
      var url = $(linkParent).find('a').attr('href');
      if (!url) {
        $(linkParent).remove();
      }
    });

    // remove learn more if no text
    var learnMoreContainerUI = $(item_row).find('.learn-more-container');
    var learnMoreText = learnMoreContainerUI.find('span.learn');
    if (!learnMoreText.html() || !learnMoreText.html().trim()) {
      learnMoreContainerUI.remove();
    }

    var titleFontSize = $(item_row).attr('title-font-size');
    
    if (size === 'Small') {
      $(item_row).addClass('jobs-video-small');
    } if (size === 'Auto') {
      $(item_row).addClass('jobs-video-auto');
    } if (size === 'Wide')  {
      $(item_row).addClass('jobs-video-wide jobs-video-auto');
    } if (size === 'Tall')  {
      $(item_row).addClass('jobs-video-tall');
    } else if (size === 'Big') {
      $(item_row).addClass('jobs-video-big');
    }else if(size==='Unset'){
      $(item_row).addClass('jobs-video-unset');
    }
    
    if (mask === 'Bottom Shadow') {
      $(item_row).addClass('jobs-mask-bottom-shadow');
    } else if (mask === 'Bottom Shadow Height 25%') {
      $(item_row).addClass('jobs-mask-bottom-shadow-height-25-percent');
    } else if (mask === 'Bottom Shadow Light') {
      $(item_row).addClass('jobs-mask-bottom-shadow-light');
    } else if (mask === 'Black 30%') {
      $(item_row).addClass('jobs-mask-black-30');
    } else {
      $(item_row).addClass('jobs-mask-none');
    }

    if (titleFontSize === '24') {
      $(item_row).addClass('jobs-title-font-size-24');
    } else if (titleFontSize === '24 - 20') {
      $(item_row).addClass('jobs-title-font-size-24-20');
    } else if (titleFontSize === 'Video Link Out Title') {
      $(item_row).find('.video-title').addClass('video--link--out__title');
    }
  });
  $("a#video1").find("img.video-icon-img").keydown(function(e){
    if(e.which == 32 || e.which == 13){
      $(this).parent().parent().trigger('click');
      e.preventDefault();
      $(this).parent().trigger('click');
    }
  });

})


// All customer function
$(function(){
  var imageView = $('.jobs-image-cell');
  $('.jobs-image-cell').attr('alt','');
  imageView.each(function(index, item_row) {
    var bannerSize = $(item_row).attr('bannerSize');
    if (bannerSize === 'Big') {
      $(item_row).addClass('jobs-image-cell-big');
    } else if (bannerSize === 'Auto') {
      $(item_row).addClass('jobs-image-cell-auto');
    } else {
      $(item_row).addClass('jobs-image-cell-small');
    }
  });

  var header1 = $('.jobs-image-cell .no-empty');
  header1.each(function(index, item_row) {
    if (!$(item_row).html()) {
      $(item_row).remove();
    } else if (!$(item_row).html().trim()) {
      $(item_row).remove();
    }
  });

  var backbutton = $('.jobs-image-cell-back-button a');
  if (!backbutton.attr('value')) {
    backbutton.parent().remove();
  }
})


// All customer function

$(function(){
  var jobsPanel = $(".jobs-page.jobs-panel");
  jobsPanel.each(function(index, item_row) {
    var textFloatTo = $(item_row).attr("text-float-to");
    if (textFloatTo === "Left") {
      $(item_row).find(".jobs-panel-column-1").addClass("text-float-to-left");
      $(item_row).find(".jobs-panel-column-3").addClass("text-float-to-left");
    } else if (textFloatTo === "Center") {
      $(item_row).find(".jobs-panel-column-1").addClass("text-float-to-center");
      $(item_row).find(".jobs-panel-column-2").addClass("text-float-to-center");
      $(item_row).find(".jobs-panel-column-3").addClass("text-float-to-center");
    }

    var pannel2 = $(item_row).find('.jobs-panel-column-2');
    var borderBottomColor = pannel2.attr('borderBottomColor');
    pannel2.css("border-bottom-color", borderBottomColor);

    var size = $(item_row).attr('size');
    if (size === 'Small') {
      $(item_row).addClass('jobs-panel-small');
    } else {
      $(item_row).addClass('jobs-panel-big');
    }

    var panelTitle = $(item_row).find('.panel-title');
    var descriptionFields = $(item_row).find('.jobs-panel-column-1 span');
    var description = '';
    descriptionFields.each(function(index, descriptionField) {
      var des = $(descriptionField).html();
      if (des) {
        description == des;
      }
    });

    var imageSrc = $(item_row).find('.image__img').attr('src');
    if (panelTitle.length === 0 && !description && !imageSrc) {
      $(item_row).remove();
    }

  });
})


// All customer function

$(function(){
  var jobsPanel = $(".jobs-page.jobs-data-list-panel");
  jobsPanel.each(function(index, item_row) {
    var textFloatTo = $(item_row).attr("text-float-to");
    if (textFloatTo === "Left") {
      $(item_row).find(".jobs-panel-column-1").addClass("text-float-to-left");
      $(item_row).find(".jobs-panel-column-3").addClass("text-float-to-left");
    } else if (textFloatTo === "Center") {
      $(item_row).find(".jobs-panel-column-1").addClass("text-float-to-center");
      $(item_row).find(".jobs-panel-column-2").addClass("text-float-to-center");
      $(item_row).find(".jobs-panel-column-3").addClass("text-float-to-center");
    }
  });

  var pannel2 = $('.jobs-panel-column-2');
  pannel2.each(function(index, item_row) {
    var borderBottomColor = $(item_row).attr('borderBottomColor');
    $(item_row).css("border-bottom-color", borderBottomColor);
  });

  var jobPanel = $('.jobs-page.jobs-data-list-panel');
  jobPanel.each(function(index, item_row) {
    var size = $(item_row).attr('size');
    if (size === 'Small') {
      $(item_row).addClass('jobs-panel-small');
    } else {
      $(item_row).addClass('jobs-panel-big');
    }
  });
})


// All customer function

$(function(){
  var jobsImageCell = $(".jobs-page.jobs-quick-links-image-cell");
  jobsImageCell.each(function(index, item_row) {
    var textAlign = $(item_row).attr("text-align-in-tablet");
    if (textAlign === "Center") {
      $(item_row).addClass("text-align-in-tablet-center");
    }
  });
  $(".learn-more-container span.learn").keydown(function(e){
    if(e.which == 13){
      $(this).closest(".jobs-quick-links-image-cell").find("a.wrap-all")[0].click();
    }
  });
});


// All customer function
/* error if can't load avatar */
function avatarError(image) {
  $(image).remove();
  return false;
}

$(function(){
  function checkForAnimation(scrollView) {
    var elem = $('.jobs-page.jobs-quotes .jobs-corporate-color-bar');
    if ((elem.length !== 0) && isElementInViewport(elem)) {
      $('.jobs-page.jobs-quotes .jobs-corporate-color-bar').addClass('animate');
    }
  }
  function handleScroll(scrollView) {
    scrollView.scroll(function (event) {
      checkForAnimation($(this));
    });
    checkForAnimation(scrollView);
  }
  handleScroll($('.wrapper-container'));
  handleScroll($('body'));
})


// All customer function

$(function(){
  var jobsLinkButton = $('.jobs-link-button');
  jobsLinkButton.each(function(index, item_row) {
    var isDisable = $(item_row).attr('isDisable');
    var link = $(item_row).find('a');
    if (link.attr('title') === 'Learn More') {
      link.attr('title', 'Learn More About ...').attr('aria-label', 'Learn More About ...');
    }
    if (isDisable === 'true') {
      $(item_row).addClass('disabled');
    }

    var type = $(item_row).attr('type');
    if (type === 'Link') {
      $(item_row).addClass('type-link');
    } else {
      $(item_row).addClass('type-primary');
    }

    var colorType = $(item_row).attr('color');
    if (colorType === 'White') {
      $(item_row).addClass('color-white');
    }
  });

});


// All customer function

$(function(){
});


// All customer function

$(function(){
  
  $('.jobs-map').each(function(index, jobsMap) {
    var jobMapElement = $(jobsMap);
    var popupInfoElement = jobMapElement.find('.popup-info');
    var lastStateKey = '';
    var api = $(jobsMap).attr("api");
    var jibeSite = $(jobsMap).attr("jibe-site");

    jibeSite = jibeSite + '/external';
    updateMapCounts();

    /*$('nav.jobs-header').on("userLoginChecked", function(event, showName){
     if ($.isloggedin && $.isloggedin()) {
        jibeSite = jibeSite + '/internal';
      } else {
        jibeSite = jibeSite + '/external';
      }

    });*/

    function unHoverOnState() {
      jobMapElement.find('.country').removeClass('hover');
      popupInfoElement.addClass('hide');
      var countryClass = '.country-' + lastStateKey;
      jobMapElement.find(countryClass).removeClass('hover');
    }
    function hoverOnState(countryEventElement) {
      unHoverOnState();
      var stateName = countryEventElement.attr('state-name');
      var stateKey = countryEventElement.attr('state-key');
      var locationsCount = countryEventElement.attr('locations-count');
      var jobsCount = countryEventElement.attr('jobs-count');
      lastStateKey = stateKey;
      if (!stateKey || !stateName) {
        return;
      }
      var countryClass = '.country-' + stateKey;
      jobMapElement.find(countryClass).addClass('hover');

      popupInfoElement.find('.state-name').html(stateName);
      if (locationsCount !== undefined) {
        popupInfoElement.find('.locations-count').html(locationsCount);
      }
      if (jobsCount !== undefined) {
        popupInfoElement.find('.jobs-count').html(jobsCount);
      }
      var popupLeft = countryEventElement.attr('popup-left');
      var popupTop = countryEventElement.attr('popup-top');
      var popupBottom = countryEventElement.attr('popup-bottom');
      var popupRight = countryEventElement.attr('popup-right');
      if (popupLeft || popupTop || popupBottom || popupRight) {
        popupInfoElement.removeClass('hide');
      }
      if (popupLeft) {
        popupInfoElement.css('left', popupLeft);
      } else {
        popupInfoElement.css('left', '');
      }
      if (popupTop) {
        popupInfoElement.css('top', popupTop);
      } else {
        popupInfoElement.css('top', '');
      }
      if (popupBottom) {
        popupInfoElement.css('bottom', popupBottom);
      } else {
        popupInfoElement.css('bottom', '');
      }
      if (popupRight) {
        popupInfoElement.css('right', popupRight);
      } else {
        popupInfoElement.css('right', '');
      }
    }

    jobMapElement.find('.country-event').hover(function(event) {
      hoverOnState($(this));
    }, unHoverOnState);

    function enterCountry(element) {
      var stateName = element.attr('state-name');
      var stateKey = element.attr('state-key');
      lastStateKey = stateKey;
      if (!stateKey || !stateName) {
        return;
      }
      var countryClass = '.country-' + stateKey;
      var countryElement = jobMapElement.find(countryClass);
      countryElement.removeClass('hover');
      openInThisTab(jibeSite + "?location=" + stateName.toLowerCase() + "&page=1");
      // hide popup info
      popupInfoElement.addClass('hide');
    }
    function handleCountryClickEvent(countryElement) {
      countryElement.click(function(event) {
        enterCountry($(this));
      });
    }

    handleCountryClickEvent(jobMapElement.find('.country-event'));

    // get info from api
    function updateMetaDataForStateUI(selector, data, keyId) {
      var dropdownStateItems = jobMapElement.find('.data-list .data-list-item');
      dropdownStateItems.each(function(index, dropdownStateItem) {
        var stateKey = $(dropdownStateItem).attr('state-key');
        var dataValue = data[stateKey];
        if (selector) {
          if (dataValue) {
            $(dropdownStateItem).find(selector).html(dataValue);
          } else {
            $(dropdownStateItem).find(selector).html(0);
          }
        }
      });

      var countryEvents = jobMapElement.find('.country-event');
      countryEvents.each(function(index, countryEvent) {
        var stateKey = $(countryEvent).attr('state-key');
        var dataValue = data[stateKey];
        if (dataValue) {
          $(countryEvent).attr(keyId, dataValue);
        } else {
          $(countryEvent).attr(keyId, 0);
        }
        var jobsCount = $(countryEvent).attr("jobs-count");
        var locationsCount = $(countryEvent).attr("locations-count");
        var countryClass = '.country-' + stateKey;
        if (jobsCount === '0' && locationsCount === '0') {
          jobMapElement.find(countryClass).addClass('isEmpty');
          $(countryEvent).attr('tabindex','0');
          $(countryEvent).addClass('isEmpty');
        } else if ((jobsCount !== undefined && jobsCount !== '0') || (locationsCount !== undefined && locationsCount !== '0')) {
          jobMapElement.find(countryClass).removeClass('isEmpty');
          $(countryEvent).removeClass('isEmpty');
        }
      });
    }
    var json_us = [];
    var json_in = [];
    var json_us_prevert = [];
    var json_in_prevert = [];
    
    function getStatesDetails(key){
     
      return new Promise((res, rej)=>{
        if(json_us.length > 0 && json_in.length > 0){
          res(getStateNameFromKey(key));
        }else if(json_us.length  == 0 || json_in.length == 0){
          $.getJSON(
            "/resources/jobs/assets/json/us_states_hash.json",
            function(json) {
              json_us = json.name;
              json_us_prevert = swapToUpperKey(json_us);
              $.getJSON(
                "/resources/jobs/assets/json/in_states_hash.json",
                function(json2){
                  json_in = json2.name;
                  json_in_prevert = swapToUpperKey(json_in);
                  res(getStateNameFromKey(key));
              });
              
              
          });
        }else{
          rej(true)
        }

        
      });
     
     
    }
   
    function getStateNameFromKey(jobsCount) {
      var obj = {};
       for(var i in jobsCount){
        var stateKey = i.toUpperCase();
       
        if(json_us[stateKey]){
          obj[json_us[stateKey]] = jobsCount[i];
        }else if(json_in[jobsCount[stateKey]]){
          obj[json_in[stateKey]] = jobsCount[i];
        }else{
          obj[stateKey] =  jobsCount[i];
        }
        
         
       }
       
       return obj;
    }

    jobMapElement.find('.dropdown .dropdown-menu input').on("input", function() {
      var dataListItems = jobMapElement.find('.dropdown .dropdown-menu .data-list .data-list-item.copied');
      var searchKey = $(this).val().toLowerCase();
      dataListItems.each(function(index, dataListItem) {
        var stateName = $(dataListItem).attr('state-name').toLowerCase();
        if (stateName.includes(searchKey)) {
          $(dataListItem).removeClass('hide');
        } else {
          $(dataListItem).addClass('hide');
        }
      });
    });

    /**
     * create dropdown state
     * @param {jobs count object} jobsCount 
     */
    function createDropdownState(jobsCount) {
      var dataList = jobMapElement.find('.dropdown .dropdown-menu .data-list');
      var dataListItem = dataList.find('.data-list-item.hide');
      dataList.find(".loading").addClass('hide');
      
      getStatesDetails(jobsCount).then((data,err)=>{
          for(var key in data){
            var count = data[key];
            if (count === 0 || count === '0' ) {
              continue;
            }
            var stateName = key;
            new_row = dataListItem.clone().addClass("copied").removeClass('hide');
            new_row.find('.state-name').html(stateName);
            new_row.find('.jobs-count').html(count);
            new_row.attr('state-key', key).attr('state-name', stateName).attr('title', stateName).attr('aria-label', stateName);
            handleCountryClickEvent(new_row);
            dataList.append(new_row);
            handleKeyboardEventForDropdownStateItem(new_row);
          }
       })
      
    }
    function updateMapCounts(){
      var internal_flag = 'external';
     /* if ($.isloggedin && $.isloggedin()) {
        internal_flag='internal';
      }*/
      var locationCount = {};
      $.getJSON(api, {format: 'json', limit: 1, page: 1, external_or_internal: internal_flag}, function (data) {
        if (!data || !data.facets || !data.facets.fields ) {
          updateMetaDataForStateUI(".jobs-count", {}, "jobs-count");
          // requestFail();
          return;
        }

        var country_state_city = _.get(data, 'facets.fields.country_state_city', []);
        if (country_state_city.length) {
          country_state_city.forEach(function(countryStateCity) {
            var values = countryStateCity[0].split('-');
            if (values.length >= 3 && values[0].toLowerCase() === 'usa') {
              var stateKey = values[1].toLowerCase();
              if (!locationCount[stateKey]) {
                locationCount[stateKey] = 1;
              } else {
                locationCount[stateKey] += 1;
              }
            }
          });
          updateMetaDataForStateUI("", locationCount, "locations-count");
        }

        var states = _.get(data, 'facets.fields.state', []);
        var jobCounts = {};
        states.forEach(function(state) {
          var stateName = state[0].toLowerCase()
          var stateCount = state[1]
          if (!(stateName in jobCounts)) {
            jobCounts[stateName] = 0;  
          }
          jobCounts[stateName] += stateCount;
          if (stateCount > 0 && !locationCount[stateName]) {
            locationCount[stateName] = 1;
          }
        });
        updateMetaDataForStateUI(".jobs-count", jobCounts, "jobs-count");
        updateMetaDataForStateUI("", locationCount, "locations-count");
        const ordered = {};
        Object.keys(jobCounts).sort().forEach(function(key) {
          ordered[key] = jobCounts[key];
        });
        jobCounts = ordered;
        createDropdownState(jobCounts);
      })
      .fail(function(response) {
        updateMetaDataForStateUI("", locationCount, "locations-count");
        updateMetaDataForStateUI(".jobs-count", {}, "jobs-count");
      });
    }

    // handle keyboard event 
    jobMapElement.find(".map-container .filter-header .dropdown .dropdown-header-bar a.select:not(.handling-keyboard)").keydown(function(event) {
      // space button
      if (event.which === 40) { // down key
        setTimeout(function () {
          var firstState = jobMapElement.find(".map-container .filter-header .dropdown .dropdown-menu .data-list > a.country-event.copied").first();
          if (firstState && firstState.length > 0) {
            firstState.focus();
            hoverOnState(firstState);
          }
        }, 0);
      }
    });
    jobMapElement.find(".map-container .filter-header .dropdown .dropdown-header-bar a.select").addClass('handling-keyboard');
    function handleKeyboardEventForDropdownStateItem(dropdownItem) {
      if (!dropdownItem.hasClass('handling-keyboard')) {
        dropdownItem.keydown(function(event) {
          // space button
          if (event.which === 40) { // down key
            var nextElement = $(this).next();
            if (nextElement.length > 0) {
              nextElement.focus();
              hoverOnState(nextElement);
            }
          } else if (event.which === 38) { // up key
            var previousElement = $(this).prev();
            if (previousElement.length > 0) {
              previousElement.focus();
              hoverOnState(previousElement);
            }
          } else if(event.which == 13) { //Enter keycode
            enterCountry($(this));
          }
        });
      }
      dropdownItem.addClass('handling-keyboard');
    }
    handleKeyboardEventForDropdownStateItem(jobMapElement.find(".map-container .filter-header .dropdown .dropdown-menu .data-list > a.copied.country-event"));

     //keyboard handle for map 
   jobMapElement.find(".map-view .country-event").keydown(function(event) {
   var nextElement = $(this);
   if(event.which == 13){
    hoverOnState(nextElement);
   }else{
    unHoverOnState();
   }
    });  
  });
});



function updatingJobUI() {

  $('.jobs-job-details-config').each(function(index, jobDetail) {
    var jobDetailElement = $(jobDetail);
    var api = jobDetailElement.attr("api");
    $.jobDetailUrl = jobDetailElement.attr("job-detail-url");
    var joberrormessage = $("input.job-error-value").attr("data-val");
    if (!$.jobDetailUrl) {
      $.jobDetailUrl = "https://comcast.jibeapply.com/prelogin";
    }
    if (!api) {
      api = '/serviceendpoints/job-details';
    }
    var jobIdSlug = getUrlParameter(null, 'job_id');
    $.jobId = '';
    if (jobIdSlug) {
      $.jobId = jobIdSlug.split("-")[0];
    }
    var external_or_internal = getUrlParameter(null, 'external_or_internal');
    if (!external_or_internal) {
      external_or_internal = 'external';
    }

    if (!jobIdSlug) {
      showLoading();
      jobDetailElement.find('.job-detail-loading-status').html('No job detail');
      return;
    }

    function showLoading() {
      jobDetailElement.find('.job-detail-loading-status').removeClass('hide');
    }

    function hideLoading() {
      jobDetailElement.find('.job-detail-loading-status').addClass('hide');
    }

    function requestFail() {
      jobDetailElement.find('.job-detail-loading-status').html("<div class='jobs-page jobs-text-1 full-width flex-v-h-left'><div class='jobs-text-text '>"+joberrormessage+"</div></div>");
    }

    // check to clear job cache
    if ($('.jobs-job-details-redirect').length > 0) {
      saveLocalStorage('job-details-cache', null);
    }

    var jobDetailsCached = getLocalStorage('job-details-cache');
    function handleResult(jobInfo) {
      if ($('.jobs-job-details-redirect').length > 0) {
        saveLocalStorage('job-details-cache', jobInfo);
      } else {
        saveLocalStorage('job-details-cache', null);
      }
      $("meta[name='title']").attr('content',jobInfo.title);
     $("meta[name='type']").attr('content',jobInfo.all_locations);
    $("meta[name='description']").attr('content',jobInfo.job_description);
      updatingJobURedirect(jobInfo);
      updatingJobUIRegular(jobInfo);
      updatingJobUIEnhance(jobInfo);
      updatingJobUIRaw(jobInfo);
    }

    var jobCacheId = jobDetailsCached ? jobDetailsCached.job_id : '';
    if (jobCacheId) {
      jobCacheId = jobCacheId.split("-")[0];
    }

    if (!jobDetailsCached || jobCacheId !== $.jobId) {
      showLoading();
      $.ajax({
       url: api + '?job_id=' + $.jobId + '&external_or_internal=' + external_or_internal,
        dataType: "json",
        type: "GET",
        contentType: "application/json; charset=utf-8",
        success: function (result, status, xhr) {
          if (result && status.toLowerCase() == 'success' && result.objects && result.objects.length > 0) {
            var jobInfo = result.objects[0];
            handleResult(jobInfo);
            hideLoading();
          } else {
            requestFail();
          }
  
        },
        error: function () {
          requestFail();        
        }
      });
    } else {
      handleResult(jobDetailsCached);
    }
  });
}

$(function(){
  if ($('.jobs-job-details-config').length > 0) {
    $('.jobs-banner-text').html("<h1 class='no-empty header-3 font-medium '></h1>");
  }
  $('.jobs-job-details-enhance').addClass('hide');
  updatingJobUI();
});



/* as google map is not required now --
var googleMap;
var currentGoogleMapPosition;// = {lat: -25.344, lng: 131.036}
var currentMarker;

// All customer function
// All customer function
function initMap() {
  var mapUI = document.getElementById('commute-time-map-canvas');
  if (!mapUI || !google || googleMap) {
    updateGoogleMapPosition();
    return;
  }
  // The map, centered at Kansas, the US
  googleMap = new google.maps.Map(mapUI, {zoom: 4, center: {lat: 38.500000, lng: 	-98.000000}});
  updateGoogleMapPosition();
}

function updateGoogleMapPosition() {
  if (!googleMap || !currentGoogleMapPosition) {
    return;
  }
  if (currentMarker) {
    currentMarker.setMap(null);
  }
  // The marker, positioned at Kansas, the US
  googleMap.setCenter(new google.maps.LatLng(currentGoogleMapPosition.lat, currentGoogleMapPosition.lng));
  currentMarker = new google.maps.Marker({position: currentGoogleMapPosition, map: googleMap});
}

//initialize Google Map
function searchMap() {
  if (!googleMap || !currentGoogleMapPosition) {
    return;
  }

  var storeLat = currentGoogleMapPosition.lat;
  var storeLng = currentGoogleMapPosition.lng;

	if (document.getElementById("pointA").value == ""){
		var uluru = {lat: storeLat, lng: storeLng};
		var map = new google.maps.Map(document.getElementById("commute-time-map-canvas"), {
			zoom: 12,
			center: uluru
		});
		var marker = new google.maps.Marker({
			position: uluru,
			map: map
		});
	} else {
		var pointA = document.getElementById("pointA").value,
			pointB = new google.maps.LatLng(storeLat, storeLng),
			center = pointB,
			myOptions = {
				zoom: 4,
				center: center,
				mapTypeId: google.maps.MapTypeId.ROADMAP
			},
      map = new google.maps.Map(document.getElementById("commute-time-map-canvas"), myOptions),
      directionsService = new google.maps.DirectionsService;
    directionsDisplay = new google.maps.DirectionsRenderer({
      map: map
    }),

		outputAtoB = document.getElementById("a2b"),

    calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB, outputAtoB);
    

    var travelMode = document.getElementById("commute-time");
    travelMode.addEventListener("click", function() {
      calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB, outputAtoB);
    });
	}
}

//Calculate time and display route on map
function calculateAndDisplayRoute(directionsService, directionsDisplay, pointA, pointB, outputTxt) {
	var selectedMode = document.querySelector("input[name=\"mode\"]:checked").value;
	directionsService.route({
		origin: pointA,
		destination: pointB,
		unitSystem: google.maps.UnitSystem.IMPERIAL,
		travelMode: google.maps.TravelMode[selectedMode]
	}, function(response, status) {
		if (status == google.maps.DirectionsStatus.OK) {
			directionsDisplay.setDirections(response);
			commuteTime = directionsDisplay.getDirections().routes[directionsDisplay.getRouteIndex()].legs[0].duration.text;
			commuteDistance = directionsDisplay.getDirections().routes[directionsDisplay.getRouteIndex()].legs[0].distance.text;
			outputTxt.value = commuteTime + " (" + commuteDistance + ")";
		} else if (status == google.maps.DirectionsStatus.ZERO_RESULTS){
			outputTxt.value = "Commute Time Not Available";
		} else {
			console.log("Directions request failed due to " + status);
		}
	});
}
*/
function updatingJobUIEnhance(jobInfo) {
  if ($('.jobs-job-details-enhance').length <= 0) {
    return;
  }

/* as google map is not required now --
	document.getElementById("pointA").addEventListener("keydown", function(event) { if (event.key === "Enter") { searchMap(); } });
    document.getElementById("commute_go").addEventListener("click", function(event) { searchMap(); });
  */
  var enhancedUI = $('.jobs-job-details-enhance');
  enhancedUI.removeClass('hide');
  /* as google map is not required now --
  if (jobInfo.lat && jobInfo.lon) {
    currentGoogleMapPosition = {lat: parseFloat(jobInfo.lat), lng: parseFloat(jobInfo.lon)};
  }
  initMap();
  var jobAddress = jobInfo.address;

  if (jobAddress === undefined || jobAddress === null || jobAddress == "null" ) {
    jobAddress = "Philadelphia, PA";
  }

  if(jobAddress){
    if(jobAddress.toUpperCase() == 'NONE'){	
      jobAddress = '';
    }
  $("#jobs-job-details-commute .commute_time_title .address").html(jobAddress);
}

  if (jobInfo.all_locations) {
    $("#jobs-job-details-commute .commute_time_title .all_locations").html(jobInfo.all_locations);
    var states = jobInfo.all_locations.split(',');
    $("#jobs-job-details-commute .to-address").val(states[0] + ' ' + jobAddress);
  }

*/
  // Carousel functionality for the application process carousel.
  $("#jobs-job-details-application .application-steps-carousel").slick({
    "arrows": false,
    "dots": true,
    "dotsclass": "slider-dots",
    "vertical": true,
    "infinite": false,
    "draggable": false,
    "touchMove": false
  });

  var heights = [];
  $(".carousel-item-wrapper.slick-slide").each(function(index) {
    heights[index] = $(this).height() + 40;
  });
  var previousHeight = heights[0];

  $(".carousel-item-wrapper").addClass('clipping');
  $("#jobs-job-details-application .slick-dots button").each(function(buttonIndex) {
    $(this).click(function(row, index) {
      var nextHeight = heights[buttonIndex];
      $(".carousel-item-wrapper").removeClass('clipping');
      if (Math.abs(nextHeight - previousHeight) > 10) {
        $(".carousel-item-wrapper").attr("style", "min-height: " + nextHeight + 'px;');
      }
      setTimeout(function () {
        $(".carousel-item-wrapper").addClass('clipping');
      }, 500);
      previousHeight = heights[buttonIndex];
    });
  });

  //360 view starts
var paranomiImgSrc; var ind, imgTitle, paranomiBgImgSrc;
var tmpObj = panaromaDetails.threedView;
 $.each( tmpObj, function( index, objn ) {
  if(objn.hasOwnProperty('location')){
    if(objn.location.indexOf(',') > -1){
        var location = objn.location.split(",");
        var city = location[0];
        var state = location[1];
        if((typeof jobInfo.city !== 'undefined' && jobInfo.city !== null ) && (typeof jobInfo.state !== 'undefined' && jobInfo.state !== null)){
          if(city.toLowerCase().trim() == jobInfo.city.toLowerCase().trim() && state.toLowerCase().trim() == jobInfo.state.toLowerCase().trim()){
            ind = index + 1;
            imgTitle = objn.title;
            if(objn.dropOpt == "yes"){
              
              }else{
              $("#section-panoramic-store").hide();
              $("#photosphere").hide();
            }
          }
        }
      }
    }
 });
  paranomiBgImgSrc = $(".panaroma-img-src .images-"+ind).find('img.backgroundImages').attr('src');
 paranomiImgSrc = $(".panaroma-img-src .images-"+ind).find('img.panaromicImages').attr('src');
    if(paranomiBgImgSrc == "" || paranomiBgImgSrc == undefined || paranomiImgSrc=="" || paranomiImgSrc == undefined){
      $("#section-panoramic-store").hide();
      $("#photosphere").hide();
    }
$("#panoStoreCover").css("background",'url('+paranomiBgImgSrc+') no-repeat center');
$("#panoStoreCover").find("p").click(function(){
  $("#section-panoramic-store").fadeOut();
 
  var PSV = new PhotoSphereViewer({
  panorama: paranomiImgSrc,
  container: 'photosphere',
 
  navbar: 'autorotate zoom download fullscreen',
  caption: imgTitle,
  default_fov: 65,
  mousewheel: false
 });
  
});

//360 view ends

}

$(function(){
  if ($('.jobs-job-details-enhance').length <= 0) {
    return;
  }
  
});


function updatingJobURedirect(jobsInfo) {
  if ($('.jobs-job-details-redirect').length <= 0) {
    return;
  }
  var isEnhancedJob = false;
  var listEnhancedJobUIs = $('.list-of-enhanced-job-id span');
  var templList = [];
  var tmpId;
  var divId;
  var url = '';
  var templateUrl;
  var div1Val = '';

  listEnhancedJobUIs.each(function(index, idUI) {
    var enhancedId = $(idUI).html();
    var template  = $(idUI).attr("data-doc");
    var div1 = $(idUI).attr("data-div1");
    if(template.length > 1){
      templateUrl = template.trim();
    }
    if(div1.length > 1){
      div1Val = div1.trim();
    }
    templList.push({"templateUrl":templateUrl,"enhancedId":enhancedId,"div1":div1Val})
  });

  for(var i=0; i<templList.length; i++){
     if (templList[i].enhancedId.indexOf(',') > -1) { 
        tmpId = templList[i].enhancedId.split(",");
        for(var j=0;  j<tmpId.length; j++){
          if(tmpId[j].trim() === jobsInfo.job_profile_id){
            url = templList[i].templateUrl + htmlEntities(location.search);
          }
        }
      }else if (templList[i].div1.indexOf(',') > -1) {
        divId = templList[i].div1.split(",");
        for(var divcode=0;  divcode<divId.length; divcode++){
          if(divId[divcode].trim() === jobsInfo.div1){
            url = templList[i].templateUrl + htmlEntities(location.search);
          }
        }
      }else{
        if( templList[i].enhancedId.trim() === jobsInfo.job_profile_id){
          url = templList[i].templateUrl + htmlEntities(location.search);
        }else if(templList[i].div1.trim() === jobsInfo.div1){
          url = templList[i].templateUrl + htmlEntities(location.search);
        }
      }
  }

  if(url == "" || url.indexOf('undefined') != -1){
    if(jobsInfo.job_profile_id === '100517' || jobsInfo.job_profile_id === '100518') {
      isEnhancedJob = true;
    }
      if (!isEnhancedJob) {
        url = '/jobs/description/regular' + htmlEntities(location.search);
      } else {
          url = '/jobs/description/enhance' + htmlEntities(location.search);
      }
     
   }
  
  window.location.href = url;
}

function htmlEntities(html) {
 
  var htmlSanitized = html
  .replace(/<pre[\w\s"=]*>/gi, function(match) { 
      // Add a place holder to attrbitues on pre elements to prevent
      // removal of these in subsequent step
      return match.replace(/=/gi, 'EQUALS')
  })
  .replace(/\w+="\w+"/gi,'')
  .replace(/\s+>/gi,'>')
  .replace(/EQUALS/i,'=')
  
  return htmlSanitized;
  }


function isListTag(element) {
  return element.is('ul') || element.is('ol');
}

function getHeaderValue(element) {
  if (isListTag(element)) {
    return null;
  }
  var firstElement = element.children().first();
  while (firstElement.html() === '') {
    firstElement = firstElement.next();
  };
  if (firstElement.length > 0 && (firstElement.has('strong') || firstElement.has('b') || firstElement.has('u'))) {
    var value = firstElement.html();
    if (isString(value)) {
      return value;
    }
  } else if (firstElement.length > 0 && isListTag(firstElement)) {
    var value = element.html();
    var values = value.split("<");
    if (values.length > 0 && isString(values[0])) {
      return values[0];
    }
  }
  var nextElement = element.next();
  if (nextElement.length > 0 && isListTag(nextElement)) {
    var value = element.html();
    if (isString(value)) {
      return value;
    }
  }

  if (firstElement.length === 0 && element.text()) {
    return element.text();
  }
  return null;
}

function getListValue(element) {
  var value = element.html();
  if (isString(value)) {
    return value;
  }
  return null;
}

function reduceEmpty(element) {
  var elementResult = element;
  while (elementResult.length > 0 && !elementResult.html()) {
    elementResult = getNextElement(elementResult);
  }
  return elementResult;
}

function getNextElement(element) {
  var elementResult = element.next();
  while (elementResult.length > 0 && elementResult.hasClass('already-checked')) {
    elementResult = elementResult.next();
  }
  elementResult.addClass('already-checked');
  return elementResult;
}

function getSubList(results, element, stopCondition, level) {
  var jobDetailElement = $('.jobs-job-details-regular');
  var textLineItemHeader = jobDetailElement.find('.job-detail-description .text-line-item-header.hide');
  var textLineItemList = jobDetailElement.find('.job-detail-description .text-line-item-list.hide');
  var rowItem;
  var tmpLevel = level;
  element = reduceEmpty(element);
  while (element.length > 0 && !element.html().toLowerCase().includes(stopCondition)) {
    element.find('*:empty:not(br)').remove();
    var headerValue = getHeaderValue(element);
    if (headerValue) {
      tmpLevel = level;
      rowItem = textLineItemHeader.clone().removeClass("hide").addClass("copied").addClass('level-' + level);
      rowItem.html(headerValue);
      results.push(rowItem);
      var firstElement = element.children().first();
      if (isListTag(firstElement)) {
        results = getSubList(results, firstElement.children().first(), stopCondition, level + 1);
      } else {
        if (!getHeaderValue(element.next())) {
          tmpLevel = level + 1;
        }
      }
    } else {
      if (isListTag(element)) {
        results = getSubList(results, element.children().first(), stopCondition, level + 1);
      } else {
        var listValue = getListValue(element);
        if (listValue) {
          if (tmpLevel === 0 && !(listValue.match(/[.,]/)) && !(listValue.startsWith('-'))) {
            rowItem = textLineItemHeader.clone().removeClass("hide").addClass("copied").addClass('level-' + tmpLevel);
            rowItem.html(listValue);
            results.push(rowItem);
          } else {
            element.html().split(/<br[\ \/]?>/).forEach(function (value) {
              if (!(value)) {
                return;
              }
              var lvl = tmpLevel;
              while (value.substring(0, 1) === '-') {
                value = value.substring(1).trim();
                lvl += 1;
              }
              rowItem = textLineItemList.clone().removeClass("hide").addClass("copied").addClass('level-' + lvl);
              var div = rowItem[0];
              div.pseudoStyle("before","background","red");
              rowItem.html(value);
              results.push(rowItem);
            })
          }
        }
      }
    }
    element = getNextElement(element);
    element = reduceEmpty(element);
  }
  return results;
}

function getSubChildList(results, element, sectionColor) {
  // header
  var headerElement = element.children(":first");
  headerElement.remove();

  var html = element.html();
  if (!html) {
    html = '';
  }
  var elements = html.split('<br>- ');
  return getSubChildListFromArray(results, elements, sectionColor);
}

function getSubChildListFromArray(results, elements, sectionColor) {
  var jobDetailElement = $('.jobs-job-details-regular');
  var textLineItemList = jobDetailElement.find('.job-detail-description .text-line-item-list.hide');
  var rowItem;
  elements = _.filter(elements, _.size);
  elements.forEach(function(text, index) {
    elements[index] = text.replace(/<br>/g, " ");
  });
  elements.forEach(function(text, index) {
    rowItem = textLineItemList.clone().removeClass("hide").addClass("copied").addClass('level-' + 0);
    var div = rowItem[0];
    if (sectionColor) {
      div.pseudoStyle("before","background",sectionColor + " !important");
    }
    rowItem.html(text);
    results.push(rowItem);
  });
  return results;
}

function reformatTopDescription() {
  var jobDetailElement = $('.jobs-job-details-regular');
  var fullDescription = jobDetailElement.find('.job-detail-description-api').html();
  if (fullDescription.indexOf('<p>Job Summary:') >= 0) {
    fullDescription = fullDescription.replace(/<p>Job Summary:/g, "<p><b>Job Summary:</b>");
    jobDetailElement.find('.job-detail-description-api').html(fullDescription);
  }

  var elementLine = jobDetailElement.find('.job-detail-description-api p').first();
  var elementResult = elementLine.next();
  var resultContent = elementResult.html();
  while (
    elementResult.length >= 0 &&
    resultContent !== undefined &&
    resultContent !== null &&
    (resultContent.indexOf('Core Responsibilities:') < 0)) {
    if (resultContent.indexOf('<br>') < 0) {
      resultContent = ('<br>' + resultContent + '<br>');
    }
    elementLine.html(elementLine.html() + '<br>' + resultContent);
    var oldElementResult = elementResult;
    elementResult = elementResult.next();
    oldElementResult.remove();
    resultContent = elementResult.html();
  }
  
}

function removeEmptyElement() {
  var jobDetailElement = $('.jobs-job-details-regular');
  var jobDescriptionApi = jobDetailElement.find('.job-detail-description-api');
  var pTag = jobDescriptionApi.find('p');
  pTag.each(function() {
    var content = $(this).text();
    var contentHtml = $(this).html();
    if (contentHtml === '&nbsp;' || content === '&nbsp;' || !content || (content && !content.trim())) {
      $(this).remove();
    }
  });

}

function reformatJobDescriptionPatternOne() {
  var jobDetailElement = $('.jobs-job-details-regular');
  var jobDescriptionApi = jobDetailElement.find('.job-detail-description-api');
  var jobDescriptionApiHtml = jobDetailElement.find('.job-detail-description-api').html();

  if (jobDescriptionApi.find('p').length > 0 || jobDescriptionApiHtml.indexOf('Job Summary:') >= 0) {
    return;
  }
  
  var descriptions = jobDescriptionApiHtml.split('<br><br>');
  var jobSumary = '';
  var headerJobDescription = '';
  var jobDescriptions = '';
  for(var i = 0; i < descriptions.length; i++) {
    descriptions[i] = descriptions[i].replace(/<br>/g, " ");
    descriptions[i] = descriptions[i].replace(/\n/g, "");
    if (!headerJobDescription && descriptions[i].length < 100) {
      headerJobDescription = capitalizeFirstLetter(descriptions[i].toLowerCase());
      if (headerJobDescription[headerJobDescription.length - 1] !== ':') {
        headerJobDescription += ':';
      }
    } else if (!jobSumary) {
      jobSumary = descriptions[i];
    } else {
      jobDescriptions += ('<br>- ' + descriptions[i]);
    }
  }

  jobDetailElement.find('.job-detail-description-api').html("<p><b>Job Summary:</b><br>" + jobSumary + "<br><br><br>" + headerJobDescription + "<br>" + jobDescriptions + "</p>");
}

function removeTagInHtmlString(htmlString, tag) {
  var jqueryObject = $('<div></div>');
  jqueryObject.html(htmlString);
  jqueryObject.find(tag).remove();
  return jqueryObject.html();
}

function removeTagWrapper(htmlString, tag, prefix, suffix) {
  var jqueryObject = $('<div></div>');
  jqueryObject.html(htmlString);
  var result = htmlString;
  
  jqueryObject.find(tag).each(function () {
    var fullTag = $(this)[0].outerHTML;
    var tagContent = $(this).html();
    result = result.replace(fullTag, (prefix ? prefix : '') + tagContent + (suffix ? suffix : '')).trim();
  });
  return result;
}

function reformatJobDescriptionPatternTwo() {
  var extrasSections = {
    AboutStrategicDevelopment: {
      title: "About Strategic Development",
      keys: ["About Strategic Development:"],
      jqueryObjectContent: $('<div><b>About Strategic Development:</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>About Strategic Development:</b>";
      }
    },
    CoreResponsibilities: {
      title: "Core Responsibilities",
      keys: ["Core Responsibilities"],
      jqueryObjectContent: $('<div><b>Core Responsibilities</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Core Responsibilities</b>";
      }
    },
    PersonalTraitsAttributes: {
      title: "Personal Traits/Attributes",
      keys: ["Personal Traits/Attributes"],
      jqueryObjectContent: $('<div><b>Personal Traits/Attributes</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Personal Traits/Attributes</b>";
      }
    },
    EducationLevel: {
      title: "Education Level",
      keys: ["Education Level"],
      jqueryObjectContent: $('<div><b>Education Level</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Education Level</b>";
      }
    },
    YearsOfExperience: {
      title: "Years of Experience",
      keys: ["Years of Experience"],
      jqueryObjectContent: $('<div><b>Years of Experience</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Years of Experience</b>";
      }
    },
    Summary: {
      title: "Summary",
      keys: ["<br>Summary"],
      jqueryObjectContent: $('<div><b>Summary</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Summary</b>";
      }
    },
    FieldOfStudy: {
      title: "Field of Study",
      keys: ["<br>Field of Study"],
      jqueryObjectContent: $('<div><b>Field of Study</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Field of Study</b>";
      }
    },
    Compliance: {
      title: "Compliance",
      keys: ["<br>Compliance"],
      jqueryObjectContent: $('<div><b>Compliance</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Compliance</b>";
      }
    },
    Disclaimer: {
      title: "Disclaimer",
      keys: ["<br>Disclaimer"],
      jqueryObjectContent: $('<div><b>Disclaimer</b></div>'),
      isEmpty: function(content) {
        return !content || content.trim() === "<b>Disclaimer</b>";
      }
    },
  };
  var jobDetailElement = $('.jobs-job-details-regular');
  var jobDescriptionApi = jobDetailElement.find('.job-detail-description-api');
  var jobDescriptionApiHtml = jobDetailElement.find('.job-detail-description-api').html();

  if (jobDescriptionApi.find('p').length <= 3) {
    return;
  }

  var jobSummaryObject = $('<div></div>');
  var jobDescriptionObject = $('<div></div>');
  var jobResponsibilitiesObject = $('<div></div>');
  var jobSpecificationObject = $('<div></div>');
  var jobPointerObject = jobDescriptionObject;
  var headerJobDescriptionString = '';

  function parseContent(content, prefix, suffix) {
    content = removeTagInHtmlString(content, 'b');
    content = removeTagInHtmlString(content, 'strong');
    var elements = content.split('<br>');
    var result = '';
    elements.forEach(function(text, index) {
      if (text && text.trim() && text.trim()[text.trim().length -1] !== ':') {
        text = prefix(text) + text + suffix(text);
        result += text;
      }
    });
    return result;
  }

  function parseAndUpdateSection(content) {
    if (!jobPointerObject) {
      return;
    }
    var text = parseContent(content, function() {
      if (jobPointerObject !== jobSummaryObject) {
        return '<br>- '; 
      }
      return ''; 
    }, function(text) {
      if (jobPointerObject === jobSummaryObject && text.trim()[text.trim().length -1] === '.') {
        return '\n'; 
      }
      return ''; 
    });
    var oldContent = jobPointerObject.html();
    oldContent += text;
    jobPointerObject.html(oldContent);
  }

  // move all child out size and break old structure
  var flatJobDescriptionHtml = jobDescriptionApiHtml;

  function restructureTheKey(key, content) {
    var re = "<strong>" + key + "</strong>";
    content = content.replace(re, key).trim();
    re = "<b>" + key + "</b>";
    content = content.replace(re, key).trim();
    re = key;
    content = content.replace(re, "<b>" + key + "</b>").trim();
    return content;
  }

  // remove unuse tag
  flatJobDescriptionHtml = flatJobDescriptionHtml.replace(/- /g, "").trim();
  flatJobDescriptionHtml = flatJobDescriptionHtml.replace(/•/g, "").trim();
  flatJobDescriptionHtml = flatJobDescriptionHtml.replace(/<s> <\/s>/g, "").trim();
  flatJobDescriptionHtml = removeTagWrapper(flatJobDescriptionHtml, 'p,ul,li', "<br>", '');
  flatJobDescriptionHtml = removeTagWrapper(flatJobDescriptionHtml, 'h1,strong', "<b>", "</b>");
  flatJobDescriptionHtml = removeTagWrapper(flatJobDescriptionHtml, 's,span,div,tr,td,tbody,table,font');
  flatJobDescriptionHtml = flatJobDescriptionHtml.replace(/<br>-/g, "<br>").trim();
  flatJobDescriptionHtml = flatJobDescriptionHtml.replace(/&nbsp;/g, "").trim();
  if (flatJobDescriptionHtml.indexOf('Employees at all levels are expect to:') < 0) {
    flatJobDescriptionHtml = restructureTheKey("Employees at all levels are expect to", flatJobDescriptionHtml);
  } else {
    flatJobDescriptionHtml = restructureTheKey("Employees at all levels are expect to:", flatJobDescriptionHtml);
  }
  if (flatJobDescriptionHtml.indexOf('Employees at all levels are expected to:') < 0) {
    flatJobDescriptionHtml = restructureTheKey("Employees at all levels are expected to", flatJobDescriptionHtml);
  } else {
    flatJobDescriptionHtml = restructureTheKey("Employees at all levels are expected to:", flatJobDescriptionHtml);
  }
  flatJobDescriptionHtml = restructureTheKey("Core Responsibilities:", flatJobDescriptionHtml);
  flatJobDescriptionHtml = restructureTheKey("<u>Responsibilities:</u>", flatJobDescriptionHtml);
  flatJobDescriptionHtml = restructureTheKey("<u>Qualifications:</u>", flatJobDescriptionHtml);
  flatJobDescriptionHtml = restructureTheKey("Job Specification:", flatJobDescriptionHtml);
  flatJobDescriptionHtml = restructureTheKey("Job Requirements:'", flatJobDescriptionHtml);
  flatJobDescriptionHtml = restructureTheKey("Job Summary:", flatJobDescriptionHtml);
  flatJobDescriptionHtml = restructureTheKey("<u>Summary:</u>", flatJobDescriptionHtml);
  for (var property in extrasSections) {
    extrasSections[property].keys.forEach(function(key) {
      flatJobDescriptionHtml = restructureTheKey(key, flatJobDescriptionHtml);
    });
  }
  flatJobDescriptionHtml = removeTagWrapper(flatJobDescriptionHtml, 'u');
  while (flatJobDescriptionHtml.indexOf('<br><br>') >= 0) {
    flatJobDescriptionHtml = flatJobDescriptionHtml.replace(/<br><br>/g, "<br>").trim();
  }
  
  // restructure the content
  jobDescriptionApi.html(flatJobDescriptionHtml);
  var headersTag = jobDescriptionApi.find('b');
  headersTag.each(function() {
    var currentHeader = $(this);
    var fullHeaderText = currentHeader[0].outerHTML;
    var headerContent = currentHeader.html();
    var contents = flatJobDescriptionHtml.split(fullHeaderText);
    flatJobDescriptionHtml = contents[1];
    var content = contents[0].trim();
    if (content && jobPointerObject) {
      parseAndUpdateSection(content);
    }
    if (!flatJobDescriptionHtml || !flatJobDescriptionHtml.trim()) {
      return false;
    }

    if (headerContent.indexOf('Job Specification:') >= 0 || headerContent.indexOf('Qualifications:') >= 0 || headerContent.indexOf('Job Requirements:') >= 0) {
      jobPointerObject = jobSpecificationObject;
    } else if (headerContent.toLowerCase().indexOf('responsibilities') >= 0) {
      jobPointerObject = jobResponsibilitiesObject;
    } else if (headerContent.indexOf('are expect to:') >= 0 || headerContent.indexOf('are expected to:') >= 0 || headerContent.indexOf('are expect to') >= 0 || headerContent.indexOf('are expected to') >= 0) {
      jobPointerObject = jobDescriptionObject;
      headerJobDescriptionString = headerContent;
      if (headerJobDescriptionString.trim()[headerJobDescriptionString.trim().length -1] !== ':') {
        headerJobDescriptionString += ':';
      }
    } else if (headerContent.indexOf('Summary:') >= 0) {
      jobPointerObject = jobSummaryObject;
    } else {
      var isIdentify = false;
      for (var property in extrasSections) {
        var extrasSection = extrasSections[property];
        extrasSection.keys.forEach(function(key) {
          if (headerContent.toLowerCase().indexOf(key.toLowerCase()) >= 0) {
            jobPointerObject = extrasSection.jqueryObjectContent;
            isIdentify = true;
            return false;
          }
        });
      }
      if (!isIdentify && headerContent && headerContent.trim() && !extrasSections[headerContent]) {
        extrasSections[headerContent] = {
          title: headerContent,
          keys: [],
          jqueryObjectContent: $('<div><b>' + headerContent + '</b></div>'),
          isEmpty: function(content) {
            return !content || content.trim() === ('<div><b>' + headerContent + '</b></div>');
          }
        };
        jobPointerObject = extrasSections[headerContent].jqueryObjectContent;
      }
    }
  });
  if (flatJobDescriptionHtml && flatJobDescriptionHtml.trim()) {
    parseAndUpdateSection(flatJobDescriptionHtml);
  }

  jobDetailElement.find('.job-detail-description-api').html("<p><b>Job Summary:</b>" + jobSummaryObject.html() + "<br><br><br>" + headerJobDescriptionString + "<br>" + jobDescriptionObject.html() + "</p><p><b>Core Responsibilities:</b>" + jobResponsibilitiesObject.html() + "</p><p><b>Job Specification:</b>" + jobSpecificationObject.html() + "</p>");
  return extrasSections;
}

// base job info
// <p><b>Job Summary:</b>Job Summary 1\nJob Summary 2<br><br><br>Employees at all levels are expect to:<br><br>- jobDescriptions 1<br>- jobDescriptions 2</p><p><b>Core Responsibilities:</b><br>- Core Responsibilities 1<br>- Core Responsibilities 2</p><p><b>Job Specification:</b><br>- Job Specification 1<br>- Job Specification 2</p>
// job info only job description
function parseDescription() {
  removeEmptyElement();
  reformatJobDescriptionPatternOne();
  var extrasSections = reformatJobDescriptionPatternTwo();
  reformatTopDescription();
  var jobDetailElement = $('.jobs-job-details-regular');
  var elementLine = jobDetailElement.find('.job-detail-description-api p').first();
  var sectionJobDescription = jobDetailElement.find('.job-detail-description .job-detail-section-description .job-detail-section-description-content');
  var sectionCoreResponsibilities = jobDetailElement.find('.job-detail-description .job-detail-section-core-responsibilities');
  var sectionJobSpecification = jobDetailElement.find('.job-detail-description .job-detail-section-job-specification');
  var sectionJobExtra = jobDetailElement.find('.job-detail-description .job-detail-section-job-extra');

  var descriptionLine = elementLine;
  var responsibilitiesLine = getNextElement(elementLine);
  var specificationLine = getNextElement(elementLine);

  // description right
  // remove redundant header
  var topDescriptionTitle = descriptionLine.children(":first").html();
  if (topDescriptionTitle) {
    topDescriptionTitle = topDescriptionTitle.trim();
  }
  descriptionLine.children(":first").remove();
  var elements = descriptionLine.html().split('<br>- ');

  if (elements.length > 1) {
    var descriptions = elements[0].split('<br><br>');
    var description2 = descriptions[descriptions.length - 1];
    var description1 = '';
    descriptions.forEach(function(text, index) {
      if (index < descriptions.length - 1) {
        description1 = description1 + text.replace(/<br>/g, " ").trim() + ' ';
      }
    });
    if (topDescriptionTitle) {
      jobDetailElement.find('.description-value-2 .title').html(topDescriptionTitle);
    } else {
      jobDetailElement.find('.description-value-2 .title').remove();
    }
    jobDetailElement.find('.description-value-2 .content').html(description1);
    jobDetailElement.find('.description-value-1').html(description2);

    elements.shift();
    // description content
    var list = getSubChildListFromArray([], elements, sectionJobDescription.attr("section-color"));
    list.forEach(function (row) {
      sectionJobDescription.append(row);
      sectionJobDescription.find('br').remove();
    });
    if (list.length === 0) {
      sectionJobDescription.addClass('hide');
    }

  } else {
    var description2 = descriptionLine.html().replace(/<br>/g, " ").trim();
    jobDetailElement.find('.description-value-1').html(description2);
    jobDetailElement.find('.description-value-2').remove();
  }
  if (!sectionJobDescription.text() || !sectionJobDescription.text().trim()) {
    sectionJobDescription.parent().parent().addClass('hide');
  }

  if (!jobDetailElement.find('.description-value-2 .content').text().trim()) {
    jobDetailElement.find('.description-value-2').remove();
  }
  if (!jobDetailElement.find('.description-value-1').text().trim()) {
    jobDetailElement.find('.description-value-1').remove();
  }
  // Core Responsibilities
  list = getSubChildList([], responsibilitiesLine, sectionCoreResponsibilities.attr("section-color"));
  list.forEach(function (row) {
    sectionCoreResponsibilities.append(row);
  });
  if (list.length === 0) {
    sectionCoreResponsibilities.addClass('hide');
  }
  // Job Specification
  list = getSubChildList([], specificationLine, sectionJobSpecification.attr("section-color"));
  list.forEach(function (row) {
    sectionJobSpecification.append(row);
  });
  if (list.length === 0) {
    sectionJobSpecification.addClass('hide');
  }

  for (var property in extrasSections) {
    var extrasSection = extrasSections[property];
    if (extrasSection.isEmpty(extrasSection.jqueryObjectContent.html())) {
      continue;
    }
    var sectionJobSpecificationClone = sectionJobExtra.clone().removeClass("hide").addClass("copied");
    sectionJobSpecificationClone.find('.title').html(extrasSection.title);
    list = getSubChildList([], extrasSection.jqueryObjectContent, sectionJobSpecificationClone.attr("section-color"));
    list.forEach(function (row) {
      sectionJobSpecificationClone.append(row);
    });
    sectionJobExtra.parent().append(sectionJobSpecificationClone);
  }

  
}

function updatingJobUIRegular(result) {
  if ($('.jobs-job-details-regular').length <= 0) {
    return;
  }

  var jobDetailElement = $('.jobs-job-details-regular');
  jobDetailElement.find('.job-detail-left-main').removeClass('hide');
  jobDetailElement.find('.job-detail-right').removeClass('hide');

  var catID = result.job_profile_id;

  if(jobCategoryItem!= undefined){
    for(var i=0; i< jobCategoryItem.length ; i++){
      if(jobCategoryItem[i].colorCode == catID){
        var videoTitle = jobCategoryItem[i].name;
        var videoUrl = jobCategoryItem[i].description;
        var vidUrl = videoUrl.split("/");
      }
    }    
  }
  var external_or_internal = result.external_or_internal;
 
  jobDetailElement.find('.job-detail-description-api').html(result.job_description);
  jobDetailElement.find('.job-detail-api-title').html(result.title);
  $('.jobs-banner-text').html("<h1 class='no-empty header-3 font-medium '>" + result.title + "</h1>");
  jobDetailElement.find('.job-detail-api-industrycode').html(result.industrycode);
  jobDetailElement.find('.job-detail-api-all_locations').html(result.all_locations);
  jobDetailElement.find('.job-detail-api-postingid').html(result.job_id);
  jobDetailElement.find('.job-detail-api-job_status').html(result.job_status);

  var dateString = result['pub_date'];
  //moment().format();
  //var date = moment(dateString);
  //var dateResult = date.format('MM/DD/YY');
  jobDetailElement.find('.job-detail-api-pub_date').html(moment.utc(dateString).format('MM/DD/YY'));

  jobDetailElement.find('.job-detail-api-team').html(result.team);

  var leadRecruiter = "";
  var contactName = '';

  if (external_or_internal === 'internal' ) {
    if (result.hiring_manager_firstname || result.hiring_manager_lastname) {
      contactName = result.hiring_manager_firstname + ' ' + result.hiring_manager_lastname;
    }

    if (result.recruiter_firstname || result.recruiter_lastname) {
      leadRecruiter = result.recruiter_firstname + ' ' + result.recruiter_lastname;
    }
  } else {
    contactName = "";
    jobDetailElement.find('.lead-recruiter-container, .hiring-manager-container, .job-detail-grid-item-right .job-type-container, .job-detail-grid-item-right .job-team-container').remove();
    jobDetailElement.find('.job-type-container, .job-team-container').removeClass('job-type-container job-team-container');
  }

  if (leadRecruiter) {
    jobDetailElement.find('.lead-recruiter').html(leadRecruiter);
  } else {
    jobDetailElement.find('.lead-recruiter-container, .job-detail-grid-item-right .job-type-container').remove();
    jobDetailElement.find('.job-type-container').removeClass('job-type-container');
  }

  if (contactName) {
    jobDetailElement.find('.job-detail-api-contact').html(contactName);
  } else {
    jobDetailElement.find('.hiring-manager-container, .job-detail-grid-item-right .job-team-container').remove();
    jobDetailElement.find('.job-team-container').removeClass('job-team-container');
  }

  var urlParams = getUrlParameters();
  var jobUrl = $.jobDetailUrl + '/' + result.job_id;
  for (var key in urlParams) {
    if (urlParams.hasOwnProperty(key)) {
      if (key.toLowerCase() === 'it') {
        var params = {};
        params[key] = urlParams[key];
        jobUrl = insertParametertoUrl(jobUrl, params);
      }
    }
  }
 
  var jobRefferer = getUrlParameter(null, 'source');
 
  var jobUrlFromJobOject = _.get(result, 'apply_url', jobUrl);

  var apply_url_job='';

  if (jobRefferer && jobRefferer!=''){

    if (jobUrlFromJobOject.indexOf('?') < 0) {
      apply_url_job = jobUrlFromJobOject + '?source=' + jobRefferer;
    }
    else {
      apply_url_job = jobUrlFromJobOject + '&source=' + jobRefferer;
    }
  }else{
    
    if (jobUrlFromJobOject.indexOf('?') < 0) {
      apply_url_job = jobUrlFromJobOject + '?source=Comcast_Website_AT';
    }
    else {
      apply_url_job = jobUrlFromJobOject + '&source=Comcast_Website_AT';
    }
  }
  jobDetailElement.find('.job-detail-api-apply_url').attr('href', apply_url_job ).removeClass('disabled');

  if ($('.jobs-job-details-raw').length <= 0) {
    parseDescription();
  }

  // update header

  var currentTemplate = location.href.indexOf("regular");
  if(currentTemplate != -1){
    if (!result.job_header || !result.job_header.trim()) {
         result.job_header = jobDetailElement.find('.description-value-header .content').html();
       }
       if (result.job_header) {
         var header = $('<div>' + result.job_header + '</div>');
         if (header.length > 0 && header.text().trim()) {
           jobDetailElement.find('.description-value-header .content').html(header.text());
         } else {
           jobDetailElement.find('.description-value-header').remove();
         }
       } else {
         jobDetailElement.find('.description-value-header').remove();
       }
  }

  // update footer
  if (result.job_footer) {
    var footer = $(result.job_footer);
    if (footer.length > 0) {
      jobDetailElement.find('.description-value-footer .content').html(footer.text());
    } else {
      jobDetailElement.find('.description-value-footer').remove();
    }
  } else {
    jobDetailElement.find('.description-value-footer').remove();
  }
/*  $(".video-container img.video-icon-img").keydown(function(e){
    if( e.which == 13){
      $(".video-container").find("a").trigger('click');
    }
  });*/
}


function updatingJobUIRaw(jobsInfo) {
  if ($('.jobs-job-details-raw').length <= 0) {
    return;
  }
  var jobDetailElement = $('.jobs-job-details-raw');
  var apiDescription = jobDetailElement.find('.job-detail-description-api');
  apiDescription.html(jobsInfo.job_description);
  if(jobsInfo.job_compensation) {
    apiDescription.append(jobsInfo.job_compensation)
    jobDetailElement.find('.job-detail-description-api-cms').append(jobsInfo.job_compensation)
  }
  if(jobsInfo.job_benefits) {
    apiDescription.append(jobsInfo.job_benefits)
    jobDetailElement.find('.job-detail-description-api-cms').append(jobsInfo.job_benefits)
  }
  if (!jobsInfo.job_header || !jobsInfo.job_header.trim()) {
    jobsInfo.job_header = jobDetailElement.find('.description-value-header .content').html();
  }
  if (jobsInfo.job_header) {
    var header = $('<div>' + jobsInfo.job_header + '</div>');
    if (header.length <= 0 || !header.text().trim()) {
      jobDetailElement.find('.jobs-horizontal-rule.jobs-horizontal-rule-1').remove();
    }
  } else {
    jobDetailElement.find('.jobs-horizontal-rule.jobs-horizontal-rule-1').remove();
  }

  if (jobsInfo.job_profile_id) {
   $("#icims_job_id").text(jobsInfo.job_profile_id);
  }
  if(jobsInfo.brand){
    $("#icims_brand_name").text(jobsInfo.brand);
  }

  if (window.location.href.indexOf("/enhance") > -1) {
    //console.log("Template is enhance");
    $('.jobs-job-details-raw').find('.job-detail-description-api').hide();
    $('.jobs-job-details-raw').find('.job-detail-description-api-cms').show();
    $('.jobs-job-details-raw').find('.description-value-footer span').hide();
  }
  else if (window.location.href.indexOf("/regular") > -1) {
    //console.log("Template is regular");
    $('.jobs-job-details-raw').find('.job-detail-description-api').show();
    $('.jobs-job-details-raw').find('.job-detail-description-api-cms').hide();
    $('.jobs-job-details-raw').find('.description-value-footer span').hide();
  }
  else{
    //console.log("Template is tpx template");
    $('.jobs-job-details-raw').find('.job-detail-description-api').show();
    $('.jobs-job-details-raw').find('.job-detail-description-api-cms').hide();
    $('.jobs-job-details-raw').find('.description-value-footer span').hide();
  }
  
}



// All customer function

$(function(){
  var slugsBK = {};
  var jobsOpportunities = $(".jobs-page.jobs-opportunities");
  // handle all opportunities in current page
  jobsOpportunities.each(function(index, jobsOpportunitySelector) {
    var jobsOpportunity = $(jobsOpportunitySelector);
    var api = $(jobsOpportunity).attr("api");
    var descriptionPageUrl= $(jobsOpportunity).attr("descriptionPageUrl");

    // init params
    var totalResults = 0;
    var currentPageIndex = 1;
    var itemsEachPage = 10;
    var isGettingJobs = false;
    var needToSearch = false;
    var searcEndValue;

    // show all loading in search result
    function showLoadingSearchResult() {
      jobsOpportunity.find(".paging-ui").addClass('disabled');
      jobsOpportunity.find(".loading-more-items").removeClass('hide');
      if (!jobsOpportunity.find('.loading-more-items').is(":visible")) {
        jobsOpportunity.find(".loading-indicator").removeClass('hide');
      }
    }

    // hide all loading in search result
    function hideLoadingSearchResult() {
      jobsOpportunity.find(".loading-indicator").addClass('hide');
      jobsOpportunity.find(".paging-ui").removeClass('disabled');
      jobsOpportunity.find(".loading-more-items").addClass('hide');
    }

    // update search param and force update list item if need
    function updateSearchParams(shouldResetPageIndex, shouldRemoveOld) {
      if (shouldResetPageIndex) {
        currentPageIndex = 1;
      }
      updatePagingUI();
      searchJobs(shouldRemoveOld, true);
      return true;
    }

    //Accessibility
    $('.dropdown-oppr-item').keydown(function(event){
      if(event.which==13){
       $(this).addClass('show');
         $('.dropdown-menu-items').addClass('show');
         $('.dropdown-menu-items').find('a:first-child').focus();
      }
      if(event.which==9){
 
       $('.previous-btn, .next-btn, .jobs-footer span a.color-blue-blur').on('focus',function(){
 
         $('.dropdown-oppr-item').removeClass('show');
         $('.dropdown-menu-items').removeClass('show');
       });
       $('.dropdown-oppr-item').on('focus',function(){
         $('.dropdown-oppr-item').removeClass('show');
         $('.dropdown-menu-items').removeClass('show');
       });
      }
     
      
     });
 
     
     $('.previous-btn, .next-btn, .jobs-footer span a.color-blue-blur').on('focus',function(){
       $('.dropdown-oppr-item').removeClass('show');
       $('.dropdown-menu-items').removeClass('show');
     });
 
 
     $('.dropdown-oppr-item .dropdown-menu-items a:last-child').keydown(function(event){
       if(event.which==40){
         $('.dropdown-oppr-item .dropdown-menu-items a.dropdown-item:last-child').focus();
       }
     });

    // handle dropdown item clicked
    function handleDropdownEvent() {
      jobsOpportunity.find(".dropdown a").click(function (event) {
        var dropdown = $(this).parents('.dropdown');
        dropdown.find('.dropdown-value-display').attr('value', $(this).attr('value'));
        dropdown.find('.dropdown-value-display').html($(this).html());
        if (dropdown.hasClass('dropdown-item-each-page')) {
          itemsEachPage = parseInt($(this).html());
          updatePagingUI();
          updateSearchParams(true, true);
        }
      });
    }

    // update ui for paging
    function updatePagingUI() {
      var inputFilterValue = $("#searchTextbox").val();
      if(inputFilterValue == ""){
      var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
      var endValue = itemsEachPage + (currentPageIndex-1) * itemsEachPage;
      if (endValue >= totalResults) {
        endValue = totalResults;
        jobsOpportunity.find('.paging-ui .next-btn').addClass('disabled');
        jobsOpportunity.find('.paging-ui .next-btn').attr('tabindex','-1');
      } else {
        jobsOpportunity.find('.paging-ui .next-btn').removeClass('disabled');
        jobsOpportunity.find('.paging-ui .next-btn').attr('tabindex','0');
      }
      if (currentPageIndex === 1) {
        jobsOpportunity.find('.paging-ui .previous-btn').addClass('disabled');
        jobsOpportunity.find('.paging-ui .previous-btn').attr('tabindex','-1');
      } else {
        jobsOpportunity.find('.paging-ui .previous-btn').removeClass('disabled');
        jobsOpportunity.find('.paging-ui .previous-btn').attr('tabindex','0');
      }
      jobsOpportunity.find('.page-ui-page-number').html(startValue + '-' + endValue + ' of ' + totalResults);
      }else{
        filterJobs();
      }
    }

    // check if user scroll to bottom
    function checkForScrollBottom() {
      var elem = jobsOpportunity.find('.loading-more-items');
      if (elem.length === 0) {
        return;
      }
      if (isElementInViewport(elem) && !elem.hasClass('hide') && elem.is(":visible")) {
        if (!isGettingJobs) {
          nextPage(false);
        }
      } else if (!elem.is(":visible")) {
        var table_items = jobsOpportunity.find('.table-item.copied');
        var length = table_items.length;
        var inputFilterValue = $("#searchTextbox").val();
        var startValue = 0 + (currentPageIndex-1) * itemsEachPage;
        var endValue = currentPageIndex * itemsEachPage; 
        var removeFor;
        var inputFilterValue = $("#searchTextbox").val();
        if(inputFilterValue.length == 0){
            removeFor = endValue - length;
        }else{
            removeFor = endValue - searcEndValue;
        }
        var forLast = ((length - itemsEachPage)+ removeFor);
        table_items.each(function(index, table_item) {
          if(endValue > totalResults){
            if (length > removeFor) {
                if(index < forLast){
                  table_item.remove();
                }
             }
          }else if (index < length - itemsEachPage ) {
            table_item.remove();
          }
        });
      }
    }
    // handle scroll event
    function handleScroll(scrollView) {
      scrollView.scroll(function (event) {
        if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {}else{
          checkForScrollBottom();
        }
      });
      if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {}else{
        checkForScrollBottom();
      }
    }
    // if we are in search page
    handleScroll($('.wrapper-container'));
    handleScroll($('body'));
    // handle resize event
    $( window ).resize(function() {
      if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {}else{
        checkForScrollBottom();
      }
    });

    /**
     * go to next page
     * @param {*} shouldRemoveOld : should clean current ui on screen
     */
    function nextPage(shouldRemoveOld) {
      var oldCurrentPageIndex = currentPageIndex;
      currentPageIndex += 1;
      var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
      if (startValue > totalResults) {
        currentPageIndex -= 1;
      } else {
        if (!updateSearchParams(false, shouldRemoveOld)) {
          currentPageIndex = oldCurrentPageIndex;
        }
        var inputFilterValue = $("#searchTextbox").val();
        if(inputFilterValue == ""){
          updatePagingUI();
        }
      }
    }

    // next paging button clicked
    jobsOpportunity.find('.paging-ui .next-btn').click(function (event) {
      nextPage(true);
    });
    // previous button page clicked
    jobsOpportunity.find('.paging-ui .previous-btn').click(function (event) {
      var oldCurrentPageIndex = currentPageIndex;
      currentPageIndex -= 1;
      if (currentPageIndex < 1) {
        currentPageIndex = 1;
      } else {
        if (!updateSearchParams(false, true)) {
          currentPageIndex = oldCurrentPageIndex;
        }
        updatePagingUI();
      }
    });

    /**
     * update result for one cell
     * @param {*} result : result object
     * @param {*} row : ui object
     */
    var searchObj = [];
    function updateOneResultSeach(result, row) {
        row.find('.item-location').html(result['all_locations']);
        var dateString = result['pub_date'];
        moment().format();
        var date = moment(dateString);
        var dateResult = date.format('MMMM DD,YYYY');
        row.find('.item-date-posted').html(dateResult);
    }
    /**
     * update ui from search result
     * @param {*} results : result from api
     */
    function showOpportunityResults(results) {
      var checkIfBusinessjob = jobsOpportunity.attr('check');
      var tableItem = jobsOpportunity.find('.table-item.hide');
      var table_items = jobsOpportunity.find('.table-item.copied');
      table_items.each(function(index, table_item) {
            table_item.remove();  
      });

      if(checkIfBusinessjob != 'title__icontains'){ 
        var inputFilterValue = $("#searchTextbox").val();

          var startValue = 0 + (currentPageIndex-1) * itemsEachPage;
          var endValue = currentPageIndex * itemsEachPage;  
      if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || isIpadOS()) {

        results.forEach(function (object, index) {
          var new_row = tableItem.clone().removeClass("hide").addClass("copied");
          var external_or_internal = 'external';
          /*if ($.isloggedin && $.isloggedin()) {
            external_or_internal = 'internal';
          } else {
            external_or_internal = 'external';
          }*/
  
          var temp = object['city'];
          var temp1 = object['state'];
          object['newlocation'] = object['city'] + ", " + object['state'];
  
          if(index >= startValue && index < endValue){ 
            new_row.find('.item-title').html(object['title']).attr('href', descriptionPageUrl + "?job_id=" + object['job_id'] + '&external_or_internal=' + external_or_internal).attr('title', object['title']).attr('aria-label', object['title']);
            var dateString = object['pub_date'];
            moment().format();
            var date = moment(dateString);
            //var dateResult = date.format('MM/DD/YY');
            var dateResult = date.format('MMMM DD, YYYY');
            object['pub_date'] = dateResult;
            new_row.find('.item-location').html(object['newlocation']);
            new_row.find('.item-date-posted').html(dateResult);
            new_row.insertBefore( jobsOpportunity.find('.jobs-search-result-content > .loading-indicator') );
          }
           object['all'] = object['title'] + " " + object['newlocation'] + " " + object['pub_date'];
      });

      } else {
        results.forEach(function (object, index) {
          var new_row = tableItem.clone().removeClass("hide").addClass("copied");
          var external_or_internal = 'external';
          /*var external_or_internal = '';
          if ($.isloggedin && $.isloggedin()) {
            external_or_internal = 'internal';
          } else {
            external_or_internal = 'external';
          }*/
  
          var temp = object['city'];
          var temp1 = object['state'];
          object['newlocation'] = object['city'] + ", " + object['state'];
  
          if(index == startValue || index <= endValue){ 
            new_row.find('.item-title').html(object['title']).attr('href', descriptionPageUrl + "?job_id=" + object['job_id'] + '&external_or_internal=' + external_or_internal).attr('title', object['title']).attr('aria-label', object['title']);
            var dateString = object['pub_date'];
            moment().format();
            var date = moment(dateString);
            //var dateResult = date.format('MM/DD/YY');
            var dateResult = date.format('MMMM DD, YYYY');
            object['pub_date'] = dateResult;
            new_row.find('.item-location').html(object['newlocation']);
            new_row.find('.item-date-posted').html(dateResult);
            new_row.insertBefore( jobsOpportunity.find('.jobs-search-result-content > .loading-indicator') );
          }
           object['all'] = object['title'] + " " + object['newlocation'] + " " + object['pub_date'];
        });
      }

    jobsOpportunity.find(".loading-more-items").css("visibility","hidden");
 }else{
    results.forEach(function (object, index) {
      var new_row = tableItem.clone().removeClass("hide").addClass("copied");
      var external_or_internal = 'external';
      /*var external_or_internal = '';
      if ($.isloggedin && $.isloggedin()) {
        external_or_internal = 'internal';
      } else {
        external_or_internal = 'external';
      }*/

        new_row.find('.item-title').html(object['title']).attr('href', descriptionPageUrl + "?job_id=" + object['job_id'] + '&external_or_internal=' + external_or_internal).attr('title', object['title']).attr('aria-label', object['title']);
        new_row.insertBefore( jobsOpportunity.find('.jobs-search-result-content > .loading-indicator') );

        if (slugsBK[object['job_id']]) {
          updateOneResultSeach(slugsBK[object['job_id']], new_row);
        } else if (api) {
          jobsOpportunity.find('.table-fail-message').addClass('hide');
          function requestFail() {
            new_row.find('.item-location').html('');
            new_row.find('.item-date-posted').html('');
            jobsOpportunity.find('.table-fail-message').removeClass('hide');
          }
          var jobId = object['job_id'];
          $.ajax({
            url: api + '/job-details' + '?job_id=' + jobId,
            dataType: "json",
            type: "GET",
            contentType: "application/json; charset=utf-8",
            success: function (result, status, xhr) {
              var data = result;
              if (result.objects && result.objects.length > 0) {
                data = result.objects[0];
              }
              if (status.toLowerCase() == 'success' && data && data['job_id']) {
                slugsBK[data['job_id']] = data;
                updateOneResultSeach(data, new_row);
              } else {
                requestFail();
              }
            },
            error: function (e) {
              requestFail();
            }
          });
        }
      });
    }
  }
function isIpadOS(){
  return navigator.userAgent.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;
}

    /** for searching and filter the jobs - Business  
     * showing filtered jobs only
    */
   function filterJobs(){
    var options = {
      shouldSort: true,
      tokenize: true,
      matchAllTokens: true,
      findAllMatches: true,
      threshold: 0,
      location: 0,
      distance: 0,
      maxPatternLength: 32,
      minMatchCharLength: 1,
      keys: [
        {
          name: "title",
          weight: 0.7
        }, {
          name: "newlocation",
          weight: 0.7
        }, {
          name: "pub_date",
          weight: 0.7
        },{
          name: "all",
          weight: 0.1
        }

      ]
    };
    var responseObj = objects1;
    var list = responseObj;
    var fuse = new Fuse(list, options); // "list" is the item array
    var searchVal;
         searchVal =  $("#searchTextbox").val();
         var result = fuse.search(htmlEntities(searchVal));
         showOpportunityResults(result);
         jobsOpportunity.find(".item-search-result").addClass('hide');
         totalResults = result.length;
         searcEndValue = result.length;
        //updating pagination ui
        var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
        var endValue = itemsEachPage + (currentPageIndex-1) * itemsEachPage;
             if (endValue >= totalResults) {
              endValue = totalResults;
              jobsOpportunity.find('.paging-ui .next-btn').addClass('disabled');
            } else {
              jobsOpportunity.find('.paging-ui .next-btn').removeClass('disabled');
            }
            if (currentPageIndex === 1) {
              jobsOpportunity.find('.paging-ui .previous-btn').addClass('disabled');
            } else {
              jobsOpportunity.find('.paging-ui .previous-btn').removeClass('disabled');
            }
            jobsOpportunity.find('.page-ui-page-number').html(startValue + '-' + endValue + ' of ' + totalResults);
        //updating pagination ui ends
             isGettingJobs = false;
             hideLoadingSearchResult();
             currentGettingJobsRequest = null;
             if (totalResults === 0) {
              jobsOpportunity.find(".item-search-result").removeClass('hide');
               jobsOpportunity.find(".loading-more-items").addClass('hide');
               var table_items = jobsOpportunity.find('.table-item.copied');
              var length = table_items.length;
                table_items.each(function(index, table_item) {
                   table_item.remove();

                });
             }
             if (needToSearch) {
               searchJobs(shouldRemoveOld);
               needToSearch = false;
             } else {
               checkForScrollBottom();
             }

  }


  $("#searchTextbox").keyup(function(e){
    var inputFilterValue = $("#searchTextbox").val();
    if(e.key == " "){
      return;
    }
    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
      var table_items = jobsOpportunity.find('.table-item.copied');
      table_items.each(function(index, table_item) {
                  table_item.remove();  
      });
      if(inputFilterValue.length != 0){
        currentPageIndex = 1;
        filterJobs();
      }else{
        currentPageIndex = 1;
        searchJobs();
      }

     }else{
       if(inputFilterValue.length != 0){
        currentPageIndex = 1;
          filterJobs();
      }else{
        currentPageIndex = 1;
        jobsOpportunity.find(".item-search-result").addClass('hide');
        searchJobs();
      }
    }

  }); 

    /**
     * calling search jobs api then update ui
     * @param {*} shouldRemoveOld : should remove old ui on screen
     */
    var objects1=[];
    function searchJobs(shouldRemoveOld) {
      var checkIfBusinessjob = jobsOpportunity.attr('check');
        //checkIfBusinessjob
  if(checkIfBusinessjob == 'title__icontains'){
    $(".filter-contain").hide();
      if (isGettingJobs || !api) {
        needToSearch = true;
        return;
      }
      if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) { } else {
        showLoadingSearchResult();
      }
      isGettingJobs = true;

      var params = {limit: itemsEachPage, page: currentPageIndex};
      params['external_or_internal'] = 'external';
      /*if ($.isloggedin && $.isloggedin()) {
        params['external_or_internal'] = 'internal';
      } else {
        params['external_or_internal'] = 'external';
      }*/
      var title__icontains = jobsOpportunity.attr('title__icontains');
      if (title__icontains) {
        params['title__icontains'] = title__icontains;
      }

      var brand = jobsOpportunity.attr('brand');
    
      if (brand) {
        params['brand'] = brand;
      }


      jobsOpportunity.find('.table-fail-message').addClass('hide');
      if (shouldRemoveOld) {
        jobsOpportunity.find('.table-item.copied').remove();
      }
      function requestFail() {
        hideLoadingSearchResult();
        updatePagingUI();
        isGettingJobs = false;
        needToSearch = false;
        jobsOpportunity.find('.table-fail-message').removeClass('hide');
        jobsOpportunity.find(".loading-more-items").addClass('hide');
        currentGettingJobsRequest = null;
      }
      currentGettingJobsRequest = $.ajax({
        url: api + '/job-search',
        data: params,
        dataType: "json",
        success: function (data) {
          if (!data || !data.facets || !data.facets.fields ) {
            requestFail();
            return;
          }
          var objects = data.objects;
          if (objects) {
            showOpportunityResults(objects);
          }

          totalResults = data.meta.total_count;
          updatePagingUI();
          isGettingJobs = false;
          if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) { } else {
            hideLoadingSearchResult();
          }
          currentGettingJobsRequest = null;
          if (totalResults === 0) {
            jobsOpportunity.find(".loading-more-items").addClass('hide');
          }
          if (needToSearch) {
            searchJobs(shouldRemoveOld);
            needToSearch = false;
          } else {
            if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {}else{
              checkForScrollBottom();
            }
          }
        },
        error: function(response) {
          requestFail();
        }
      });
    }else{
      //checkIfBusinessjob
    if (isGettingJobs || !api) {
      needToSearch = true;
      return;
    }
    showLoadingSearchResult();
    isGettingJobs = true;

    //var params = {limit: 9999, page: currentPageIndex};
    var params = {limit: 9999};
    params['external_or_internal'] = 'external';
   /* if ($.isloggedin && $.isloggedin()) {
      params['external_or_internal'] = 'internal';
    } else {
      params['external_or_internal'] = 'external';
    }*/
    var brand = jobsOpportunity.attr('brand');
    if (brand) {
      params['brand'] = brand;
    }

    jobsOpportunity.find('.table-fail-message').addClass('hide');
    if (shouldRemoveOld) {
      jobsOpportunity.find('.table-item.copied').remove();
    }
    function requestFail() {
      hideLoadingSearchResult();
      updatePagingUI();
      isGettingJobs = false;
      needToSearch = false;
      jobsOpportunity.find('.table-fail-message').removeClass('hide');
      jobsOpportunity.find(".loading-more-items").addClass('hide');
      currentGettingJobsRequest = null;
    }

    if(objects1 == ""){
      currentGettingJobsRequest = $.ajax({
        url: api + '/job-search',
        data: params,
        dataType: "json",
        success: function (data) {
          if (!data || !data.facets || !data.facets.fields ) {
            requestFail();
            return;
          }
          var objects = data.objects;
          objects1 = data.objects;
          if (objects) {
            showOpportunityResults(objects);
          }

      totalResults = data.meta.total_count;
      updatePagingUI();
      isGettingJobs = false;
      hideLoadingSearchResult();
      currentGettingJobsRequest = null;
      if (totalResults === 0) {
        jobsOpportunity.find(".loading-more-items").addClass('hide');
      }
      if (needToSearch) {
        searchJobs(shouldRemoveOld);
        needToSearch = false;
      } else {
        if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {}else{
          checkForScrollBottom();
        }
       }
     },
      error: function(response) {
      requestFail();
      }
   });
  }else{
    var searchFilterValue = $("#searchTextbox").val();
    if(searchFilterValue.length == 0){
      showOpportunityResults(objects1);
    }else{
      showOpportunityResults(objects1);
      filterJobs();
    }
    totalResults = objects1.length;
    updatePagingUI();
    isGettingJobs = false;
    hideLoadingSearchResult();
    currentGettingJobsRequest = null;
    if (totalResults === 0) {
      jobsOpportunity.find(".loading-more-items").addClass('hide');
    }
    if (needToSearch) {
      searchJobs(shouldRemoveOld);
      needToSearch = false;
    } else {
      if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {}else{
        checkForScrollBottom();
      }
    }
   }

  }
    }

    jobsOpportunity.find('.table-fail-message').addClass('hide');
    updatePagingUI();
    handleDropdownEvent();
   /* $('nav.jobs-header').on("userLoginChecked", function(event, showName){
      updateSearchParams(true, true);
    });*/
    updateSearchParams(true, true);
  });

});

// function htmlEntities(str) {
//   console.log("HtmlEntities: " +str);
//   //return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
//   return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
// }

function htmlEntities(html) {
 
  var htmlSanitized = html
  .replace(/<pre[\w\s"=]*>/gi, function(match) { 
      // Add a place holder to attrbitues on pre elements to prevent
      // removal of these in subsequent step
      return match.replace(/=/gi, 'EQUALS')
  })
  .replace(/\w+="\w+"/gi,'')
  .replace(/\s+>/gi,'>')
  .replace(/EQUALS/i,'=')
  
  return htmlSanitized;
  }


// All customer function

$(function(){
  var jobsStateLists = $(".jobs-page.jobs-state-list");
  // handle all opportunities in current page
  jobsStateLists.each(function(index, jobsStateListSelector) {
    var jobsStateList = $(jobsStateListSelector);
    var api = $(jobsStateList).attr("api");
 
    var jibeSite = $('.jobs-map').attr("jibe-site");

    jibeSite = jibeSite + '/external';

    // init params
    var totalResults = 0;
    var currentPageIndex = 1;
    var itemsEachPage = 10;
    var isGettingJobs = false;
    var states = [];

    // show all loading in search result
    function showLoadingSearchResult() {
      jobsStateList.find(".paging-ui").addClass('disabled');
      jobsStateList.find(".loading-more-items").removeClass('hide');
      if (!jobsStateList.find('.loading-more-items').is(":visible")) {
        jobsStateList.find(".loading-indicator").removeClass('hide');
      }
    }

    // hide all loading in search result
    function hideLoadingSearchResult() {
      jobsStateList.find(".loading-indicator").addClass('hide');
      jobsStateList.find(".paging-ui").removeClass('disabled');
      jobsStateList.find(".loading-more-items").removeClass('hide');
    }

    // update search param and force update list item if need
    function updateSearchParams(shouldResetPageIndex, shouldRemoveOld) {
      if (shouldResetPageIndex) {
        currentPageIndex = 1;
      }
      updatePagingUI();
      searchJobs(shouldRemoveOld, true);
      return true;
    }

    // handle dropdown item clicked
    function handleDropdownEvent() {
      jobsStateList.find(".dropdown a").click(function (event) {
        var dropdown = $(this).parents('.dropdown');
        dropdown.find('.dropdown-value-display').attr('value', $(this).attr('value'));
        dropdown.find('.dropdown-value-display').html($(this).html());
        if (dropdown.hasClass('dropdown-item-each-page')) {
          itemsEachPage = parseInt($(this).html());
          updatePagingUI();
          updateSearchParams(true, true);
        }
      });
    }

    function isLastPage() {
      var endValue = itemsEachPage + (currentPageIndex-1) * itemsEachPage;
      if (endValue >= totalResults) {
        return true;
      }
      return false;
    }

    // update ui for paging
    function updatePagingUI() {
      var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
      var endValue = itemsEachPage + (currentPageIndex-1) * itemsEachPage;
      if (endValue >= totalResults) {
        endValue = totalResults;
        jobsStateList.find('.paging-ui .next-btn').addClass('disabled');
      } else {
        jobsStateList.find('.paging-ui .next-btn').removeClass('disabled');
      }
      if (currentPageIndex === 1) {
        jobsStateList.find('.paging-ui .previous-btn').addClass('disabled');
      } else {
        jobsStateList.find('.paging-ui .previous-btn').removeClass('disabled');
      }
      jobsStateList.find('.page-ui-page-number').html(startValue + '-' + endValue + ' of ' + totalResults);
    }

    // check if user scroll to bottom
    function checkForScrollBottom() {
      var elem = jobsStateList.find('.loading-more-items');
      if (elem.length === 0) {
        return;
      }
      if (isElementInViewport(elem) && !elem.hasClass('hide') && elem.is(":visible")) {
        if (!isGettingJobs) {
          nextPage(false);
        }
      }
    }
    // handle scroll event
   /* function handleScroll(scrollView) {
      scrollView.scroll(function (event) {
        checkForScrollBottom();
      });
      checkForScrollBottom();
    }
    // if we are in search page
    handleScroll($('.wrapper-container'));
    handleScroll($('body'));
    // handle resize event
    $( window ).resize(function() {
      checkForScrollBottom();
    });*/

    /**
     * go to next page
     * @param {*} shouldRemoveOld : should clean current ui on screen
     */
    function nextPage(shouldRemoveOld) {
      var oldCurrentPageIndex = currentPageIndex;
      currentPageIndex += 1;
      var startValue = 1 + (currentPageIndex-1) * itemsEachPage;
      if (startValue > totalResults) {
        currentPageIndex -= 1;
      } else {
        if (!updateSearchParams(false, shouldRemoveOld)) {
          currentPageIndex = oldCurrentPageIndex;
        }
        updatePagingUI();
      }
    }

    // next paging button clicked
    jobsStateList.find('.paging-ui .next-btn').click(function (event) {
      nextPage(true);
    });
    // previous button page clicked
    jobsStateList.find('.paging-ui .previous-btn').click(function (event) {
      var oldCurrentPageIndex = currentPageIndex;
      currentPageIndex -= 1;
      if (currentPageIndex < 1) {
        currentPageIndex = 1;
      } else {
        if (!updateSearchParams(false, true)) {
          currentPageIndex = oldCurrentPageIndex;
        }
        updatePagingUI();
      }
    });
    /**
     * update ui from search result
     * @param {*} results : result from api
     */
    function showResultsSearch(results) {
      var tableItem = jobsStateList.find('.table-item.hide');
      results.forEach(function (object, index) {
        var new_row = tableItem.clone().removeClass("hide").addClass("copied");
        var stateName = getStateNameFromKey(object[0].toUpperCase());
        stateName = capitalizeFirstLetter(stateName.toLowerCase());

        new_row.find('.item-state').html(stateName);
        new_row.find('.item-openings').html(object[1]);
        new_row.find('.country-event').attr('state-name', stateName).attr('title', stateName).attr('aria-label', stateName);
        handleCountryClickEvent(new_row);
        new_row.insertBefore( jobsStateList.find('.jobs-search-result-content > .loading-indicator') );
      });
    }


    function handleCountryClickEvent(countryElement) {
      countryElement.on("click touchstart",function(event) {
        enterCountry($(this));
      });
    }

    function enterCountry(element) {
      var stateName = element.find('.country-event').attr('state-name');
     openInThisTab(jibeSite + "?location=" + stateName.toLowerCase() + "&page=1");
    }

    // get state map key from json file

    var json_us = [];
    var json_in = [];
    var json_us_prevert = [];
    var json_in_prevert = [];
    $.getJSON(
      "/resources/jobs/assets/json/us_states_hash.json",
      function(json) {
        json_us = json.name;
        $.getJSON(
          "/resources/jobs/assets/json/in_states_hash.json",
          function(json2){
            json_in = json2.name;
            json_us_prevert = swapToUpperKey(json_us);
            json_in_prevert = swapToUpperKey(json_in);
        });
    });

    function getStateNameFromKey(key) {
      var stateName = key;
      var stateKey = key.toUpperCase();
      if (json_us[stateKey]) {
        stateName = json_us[stateKey];
      }  else if (json_in[stateKey]) {
        stateName = json_in[stateKey];
      } else {
        stateName=stateKey;
      }
      return stateName;
    }

    /**
     * calling search jobs api then update ui
     * @param {*} shouldRemoveOld : should remove old ui on screen
     */
    function searchJobs(shouldRemoveOld) {
      if (isGettingJobs || !api) {
        return;
      }
      if (shouldRemoveOld) {
        jobsStateList.find('.table-item.copied').remove();
      }
      if (states.length > 0) {
        if (isLastPage()) {
          jobsStateList.find('.loading-more-items').addClass('hide');
        }
        showResultsSearch(paginate(states.sort(), itemsEachPage, currentPageIndex));
        return;
      }
      showLoadingSearchResult();
      isGettingJobs = true;

      jobsStateList.find('.table-fail-message').addClass('hide');
      function requestFail() {
        hideLoadingSearchResult();
        updatePagingUI();
        isGettingJobs = false;
        jobsStateList.find('.table-fail-message').removeClass('hide');
        jobsStateList.find(".loading-more-items").addClass('hide');
        currentGettingJobsRequest = null;
      }
      var internal_flag = 'external';
      /*if ($.isloggedin && $.isloggedin()){
        internal_flag = 'internal';
      }*/
      currentGettingJobsRequest = $.getJSON(api, {format: 'json', limit: 1, page: 1, external_or_internal: internal_flag}, function (data) {
        if (!data || !data.facets || !data.facets.fields ) {
          requestFail();
          return;
        }
        states = _.get(data, 'facets.fields.state', []);
        if (states.length > 0) {
          //showResultsSearch(paginate(states.sort(), itemsEachPage, currentPageIndex));
          showResultsSearch(states.sort());
          jobsStateList.find(".loading-more-items").addClass('hide');
          jobsStateList.find(".loading-indicator").addClass('hide');
          jobsStateList.find(".paging-ui").removeClass('disabled');
          return;
        }

        totalResults = states.length;
        updatePagingUI();
        isGettingJobs = false;
        hideLoadingSearchResult();
        currentGettingJobsRequest = null;
        if (totalResults === 0) {
          jobsStateList.find(".loading-more-items").addClass('hide');
        }
        checkForScrollBottom();
      })
      .fail(function(response) {
        requestFail();
      });
    }

    jobsStateList.find('.table-fail-message').addClass('hide');
    updatePagingUI();
    handleDropdownEvent();
   /* $('nav.jobs-header').on("userLoginChecked", function(event, showName){
      updateSearchParams(true, true);
    });*/
    updateSearchParams(true, true);
  });

});


// All customer function

$(function(){
});


// All customer function
$(function(){

  $('.jobs-page.jobs-image-grid script, .jobs-page.jobs-image-grid link').appendTo("head");

  var getYoutubeIdByUrl = function( url ){
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
    var match = url.match(regExp);
    return (match&&match[7].length==11)? match[7] : false;
  };

  var videoContainer = $('.jobs-image-grid .video-container');
  videoContainer.each(function(index, item_row) {
    var borderBottomColor = $(item_row).attr('borderBottomColor');
    if (borderBottomColor.toLowerCase() === 'colorful') {
      $(item_row).addClass('colorful');
      $(item_row).css("border", "none");
    } else if (borderBottomColor) {
      //$(item_row).find('.mask').css('bottom', 5);
      $(item_row).css("border-bottom-color", borderBottomColor);
    } else {
      $(item_row).css("border", "none");
    }
  });
  
  var videoLink = $('.jobs-image-grid .youtube-link');
  videoLink.each(function(index, item_row) {
    var videoUrl = $(item_row).attr('data-video');
    var oldDataVideoId = $(item_row).attr('data-video-id');
    if (!oldDataVideoId) {
      if (videoUrl) {
        var videoId = getYoutubeIdByUrl(videoUrl);
        $(item_row).attr('data-video-id', videoId);
        $(item_row).modalVideo({
          channel: 'youtube',
          youtube: {
            autoplay: 0,
            cc_load_policy: 1,
            color: null,
            controls: 1,
            disablekb: 0,
            enablejsapi: 0,
            end: null,
            fs: 1,
            h1: null,
            iv_load_policy: 1,
            list: null,
            listType: null,
            loop: 0,
            modestbranding: 1,
            origin: null,
            playlist: null,
            playsinline: null,
            rel: 0,
            showinfo: 0,
            start: 0,
            wmode: 'transparent',
            theme: 'dark'
          },
        });
      } else {
        $(item_row).removeClass('clickable');
        $(item_row).css('cursor', 'default');
        var borderBottomColor = $(item_row).closest('.video-container').attr('borderBottomColor');
        if (borderBottomColor && borderBottomColor.toLowerCase() !== 'colorful') {
          $(item_row).css('cssText', 'cursor: default; height:calc(100% + 5px) !important;');
        }
        $(item_row).find('span').remove();
        $(item_row).find('img').remove();
      }
    }
  });


  var jobVideo = $('.jobs-image-grid');
  jobVideo.each(function(index, item_row) {
    var size = $(item_row).attr('size');
    var mask = $(item_row).attr('mask');
    var showNextButton = $(item_row).attr('show-next-button');
    if (showNextButton === 'true') {
      $(item_row).addClass('video-has-link');
    } else {
      $(item_row).find('.cell-next-icon').remove();
    }
    $(item_row).find('.remove-if-empty-link-child').each(function(index, linkParent) {
      var url = $(linkParent).find('a').attr('href');
      if (!url) {
        $(linkParent).remove();
      }
    });
    var titleFontSize = $(item_row).attr('title-font-size');
    
    if (size === 'Small') {
      $(item_row).addClass('jobs-image-grid-small');
    } if (size === 'Auto') {
      $(item_row).addClass('jobs-image-grid-auto');
    } if (size === 'Wide')  {
      $(item_row).addClass('jobs-image-grid-wide jobs-image-grid-auto');
    }  if (size === 'Tall')  {
      $(item_row).addClass('jobs-image-grid-tall');
    } else if (size === 'Big') {
      $(item_row).addClass('jobs-image-grid-big');
    }else if(size==='Unset'){
      $(item_row).addClass('jobs-image-grid-unset');
    }

    if (mask === 'Bottom Shadow') {
      $(item_row).addClass('jobs-mask-bottom-shadow');
    } else if (mask === 'Bottom Shadow Light') {
      $(item_row).addClass('jobs-mask-bottom-shadow-light');
    } else if (mask === 'Black 30%') {
      $(item_row).addClass('jobs-mask-black-30');
    } else {
      $(item_row).addClass('jobs-mask-none');
    }
    if (titleFontSize === '24') {
      $(item_row).addClass('jobs-title-font-size-24');
    } else if (titleFontSize === '24 - 20') {
      $(item_row).addClass('jobs-title-font-size-24-20');
    }
    var jobVideoLink = $(item_row).find('.redirect-url');
    if (jobVideoLink.length > 0 && jobVideoLink.attr('href')) {
      var youtubeLink = jobVideo.find('.youtube-link');
      youtubeLink.removeAttr("href");
      jobVideoLink.css('cssText', 'height:calc(100% + 5px) !important;');
    }

    var showFullImage = $(item_row).attr('input-show-full-image');
    if (showFullImage === 'true') {
      var videoRapper = $(item_row).find('.video__wrapper');
      videoRapper.addClass('wrap-all');
     
      if(videoRapper.length==0){
      var videoContainer = $(item_row).find('.video-container');
      videoContainer.removeClass('relative');
      }
      $(item_row).find('img.cell-background').removeClass('hide');
    } else {
      $(item_row).find('img.cell-background').remove();
    }
  });

  $("a.wrap-all img.video-icon-img").keydown(function(e){
    if(e.which == 13){
      $(this).parent().parent().trigger('click');
    }
  });

})


// All customer function

$(function(){
  var jobsHistoryBottoms = $('.jobs-history-bottom');
  jobsHistoryBottoms.each(function(index, item_row) {
    var jobsHistoryBottom = $(item_row);
    $('body').append(jobsHistoryBottom);
    $('footer > .bottom').css('padding-bottom', '160px');
  });
});


// All customer function
$(function(){
  var bannerTexts = $('.jobs-banner-text');
  bannerTexts.each(function(index, item_row) {
    var bannerText = $(item_row);
    var count = 0;
    var jobImageCell = bannerText.prev();
    while (jobImageCell.length !== 0 && !jobImageCell.hasClass('jobs-image-cell') && count < 4) {
      count += 1;
      jobImageCell = jobImageCell.prev();
    }
    if (jobImageCell.length > 0) {
      jobImageCell.find('.jobs-image-cell-content').append(bannerText);
    }
  });

  var header1 = $('.jobs-image-cell .no-empty');
  header1.each(function(index, item_row) {
    if (!$(item_row).html()) {
      $(item_row).remove();
    } else if (!$(item_row).html().trim()) {
      $(item_row).remove();
    }
  });
})


// All customer function

$(function(){
  $('.jobs-team-container').each(function(index, item_row) {
    var jobsTeamContainer = $(item_row);

    var imageGrids = jobsTeamContainer.find('.jobs-image-grid');

    function updateExternalInternalLink() {
      imageGrids.each(function(index, item_row) {
        var redirectUrlUI = $(this).find('.redirect-url');
        if (!redirectUrlUI.attr('internal-external-url')) {
          redirectUrlUI.attr('internal-external-url', redirectUrlUI.attr('href'));
        }
  
        var internalExternalUrl = redirectUrlUI.attr('internal-external-url');
        if (internalExternalUrl) {
          var urls = internalExternalUrl.split(' ');
          if (urls.length > 1) {
           /* if ($.isloggedin && $.isloggedin()) {
              redirectUrlUI.attr('href', urls[1]);
            } else {
              redirectUrlUI.attr('href', urls[0]);
            }*/
            redirectUrlUI.attr('href', urls[0]);
          }
        }
      });
    }

    function updateExternalInternalJobCounts(){
      var internal_flag='external';
      /*if ($.isloggedin && $.isloggedin()){
        internal_flag='internal';
      }*/
      var api = $(jobsTeamContainer).attr("api");
      if (!api) {
        return;
      }
      $.getJSON(api, {format: 'json', limit: 1, page: 1, external_or_internal: internal_flag}, function (data) {
        if (!data || !data.facets || !data.facets.fields ) {
          updateMetaDataForStateUI(".jobs-count", {}, "jobs-count");
          // requestFail();
          return;
        }
        var categories = _.get(data, 'facets.fields.teams', []);
        imageGrids.each(function(index, item_row) {
          var jobImageGrid = $(item_row);
          var titleDetail = jobImageGrid.find('span.title-detail');
          var mapKey = jobImageGrid.attr('map-key');
          var titles = [];
          if (mapKey) {
            titles = mapKey.trim().replace(/ \+/g, "").replace(/  /g, " ").split(' ');
          }
          var isMatch = true;
          var matchedCategory;
          var categoriesLength = categories.length;
          for (var j = 0; j < categoriesLength; j++) {
            var category = categories[j];
            isMatch = true;
            var titlesLength = titles.length;
            for (var i = 0; i < titlesLength; i++) {
              var title = titles[i];
              if( category[0].toLowerCase().indexOf(title.toLowerCase()) < 0){
                isMatch = false;
                break;
              }
            }
            if (isMatch && titlesLength > 0) {
              matchedCategory = category;
              break;
            }
          }
          if (matchedCategory) {
            titleDetail.html(matchedCategory[1] + " Openings");
            var txt1 = "Click to apply for jobs in "+matchedCategory[0];
            $(".jobs-image-grid").eq(index).find(".redirect-url").attr("aria-label", txt1);
          } else {
            titleDetail.remove();
          }
        });
      })
      .fail(function(response) {
        jobImageGrid.find('span.title-detail').remove();
      });
    }
    
    updateExternalInternalLink();
    updateExternalInternalJobCounts();
    // check login user

   /* $('nav.jobs-header').on("userLoginChecked", function(event, showName){
      updateExternalInternalLink();
      updateExternalInternalJobCounts();
    });*/

  });
});


// All customer function

$(function(){
  var jobsColoredList = $('.jobs-colored-list');
  jobsColoredList.each(function(index, item_row) {

    var bulletColor = $(item_row).attr('bullet-color');
    if (bulletColor) {
      var lis = $(item_row).find('li');
      lis.each(function(index, li) {
        var div = $(li)[0];
        div.pseudoStyle("before","color",bulletColor);
      });
    }
  });

});


$(function () {
  $('li.accordion-list-itm').on("click", function (e) {
    //e.preventDefault();
    if (e.target.nodeName != "A") {
      $(this).find('.accordion-description').slideToggle();
      if ($(this).hasClass('arrow-up')) {
        $(this).css('background-image', 'url(/resources/jobs/assets/img/less-blue.png)');
        $(this).removeClass('arrow-up');
        $(this).addClass('arrow-down');
        $(this).find('.card-header').attr("aria-expanded", true);
      } else {
        $(this).css('background-image', 'url(/resources/jobs/assets/img/plus-blue.png)');
        $(this).removeClass('arrow-down');
        $(this).addClass('arrow-up');
        $(this).find('.card-header').attr("aria-expanded", false);
      }
    }
  });
$('li.accordion-list-itm').keydown(function(e){
    if (e.target.nodeName != "A") {
      if(e.which==13){
      $(this).find('.accordion-description').slideToggle();
      var text_desc= $(this).find('.card-block').text();
      if ($(this).hasClass('arrow-up')) {
        $(this).attr('aria-expanded','true');
        $(this).css('background-image', 'url(/resources/jobs/assets/img/less-blue.png)');
        $(this).removeClass('arrow-up');
        $(this).addClass('arrow-down');
        $(this).find('.card-header').attr("aria-expanded", true);
      } else {
        $(this).attr('aria-expanded','false');
        $(this).css('background-image', 'url(/resources/jobs/assets/img/plus-blue.png)');
        $(this).removeClass('arrow-down');
        $(this).addClass('arrow-up');
        $(this).find('.card-header').attr("aria-expanded", false);
      }
     }
    }
  });

 /* $('li.accordion-list-itm').keydown(function(e){
    if (e.target.nodeName != "A") {
      if(e.which==13){
      $(this).find('.accordion-description').slideToggle();
      var text_desc= $(this).find('.card-block').text();
      if ($(this).hasClass('arrow-up')) {
        $(this).attr('aria-expanded','true');
        $(this).attr('aria-label',text_desc);
        $(this).attr('role','menuitem');
        $(this).css('background-image', 'url(/resources/jobs/assets/img/less-blue.png)');
        $(this).removeClass('arrow-up');
        $(this).addClass('arrow-down');
      } else {
        $(this).attr('aria-label','');
        $(this).attr('aria-expanded','false');
        $(this).attr('role','menuitem');
        $(this).css('background-image', 'url(/resources/jobs/assets/img/plus-blue.png)');
        $(this).removeClass('arrow-down');
        $(this).addClass('arrow-up');
      }
     }
    }
  });*/
})


// All customer function

$(function(){
  var list = $('.jobs-how-we-hire-cells');
  list.each(function(index, item_row) {
    var cells = $(item_row);
  });

});


// All customer function

$(function(){

  var list = $(".devportal-banner-image-carousel");
  list.each(function(index, item_row) {
    var imageCarousel = $(item_row).find('.owl-carousel');

    imageCarousel.find("img").matchHeight({ byRow: false, property: "height"});

    var items = imageCarousel.find('.item');
    var loop = true;
    if (items.length <= 1) {
      loop = false;
    }
    imageCarousel.owlCarousel({
      center: true,
      items: 1,
      loop: loop,
      margin: 0,
      nav : false,
      dots: false,
      autoplay:true,
      autoplayTimeout: 10*1000, // 10s
    });
  });
});


// All customer function

$(function(){
});


// All customer function

$(function(){
})


// All customer function
$(function() {
  $('.jobs-corporate-card-row').each(function() {
    var cardRow = $(this);
    cardRow.find("a.card").matchHeight({ byRow: false, property: "height", target: cardRow.find("a.card:first")});

    var interval = setInterval(function(){
      var allHeightIsOk = true;
      cardRow.find("a.card").each(function() {
        var height = $(this).height();
        if (height === 0) {
          allHeightIsOk = false;
        }
      });
      if (allHeightIsOk) {
        clearInterval(interval);
      } else {
        cardRow.find("a.card").matchHeight({ byRow: false, property: "height", target: cardRow.find("a.card:first")});
      }
    }, 500);
  });
  $("div.jobs-seemore").keydown(function(event){
    if(event.which==13){
      $(this).trigger("click");
    }
  });
});


// All customer function
$(function() {
  
  
  $('.featured-parallax').each(function() {
    var featureParallax = $(this);
    var breakpoints = {
      tablet: 764,
      desktop: 1028
    };
    const $collection = featureParallax.find('[data-options*=parallax-drift]');

    const initItemOffset = function(el) {
      if ($(window).width() < breakpoints.desktop) {
        return false;
      }
      const $self = $(el);
      const selfOffset = getItemOffsets($self);
      const offset = cssLocals(el[0]).settings.offset;
      const vVals = getViewportValues();

      // This item is below viewport
      if (selfOffset.top > vVals.bottom) {
        $self.css(cssTranslateY(offset));
      }

      // This item is above viewport
      if (selfOffset.bottom < vVals.top) {
        $self.css(cssTranslateY(-offset));
      }
    };

    const translateItem = function(el) {
      // Closures
      const $self = $(el);
      const offset = getComputedHeight(
        cssLocals(el[0]).settings.offset
      );
      var lastScrollMiddle = window.innerHeight / 2;

      // return a function with closed over values
      return function() {
        if ($(window).width() < breakpoints.desktop) {
          // Reset translate values
          $self.css(cssTranslateY(0));
          return false;
        }

        const selfOffset = getItemOffsets($self);
        const viewportOffset = getViewportValues();
        const direction =
          viewportOffset.middle > lastScrollMiddle ? 'down' : 'up';
        const translateTrack = {
          top: selfOffset.top - offset,
          middle: selfOffset.middle,
          bottom: selfOffset.bottom + offset
        };

        // Scrolling Up
        if (direction === 'up') {
          if (
            viewportOffset.top <= translateTrack.bottom &&
            viewportOffset.bottom >= translateTrack.top
          ) {
            $self.css(
              cssTranslateY(
                (((viewportOffset.middle - translateTrack.middle) /
                  viewportOffset.height) *
                  offset) + 'px'
              )
            );
          }
        }

        // Scrolling Down
        if (direction === 'down') {
          if (
            viewportOffset.bottom >= translateTrack.top &&
            viewportOffset.top <= translateTrack.bottom
          ) {
            $self.css(
              cssTranslateY(
                (((viewportOffset.middle - translateTrack.middle) /
                  viewportOffset.height) *
                  offset) + 'px'
              )
            );
          }
        }

        lastScrollMiddle = viewportOffset.middle;
      };
    };

    $collection.each(function() {
      const $item = $(this);

      // INIT
      // Set negative or positive offsets if item os off-screen
      initItemOffset($item);

      // Event Bind
      $(".wrapper-container").on('scroll', throttle(translateItem($item), 10));
    });

  });
});


// All customer function

$(function(){
    $(".jobs-corporate-image__img").each(function(index, item_row) {
        var $container = $(this),
        imgUrl = $container.attr('src');
        if (imgUrl && detectIE()) {
            var parent = $(this).parent();
            var mask  = $('<div class="wrap-all jobs-corporate-image__img"></div>');
            mask.css('backgroundImage', 'url(' + imgUrl + ')');
            parent.append(mask);
        } 
    });
  })



/*
* FileSaver.js
* A saveAs() FileSaver implementation.
*
* By Eli Grey, http://eligrey.com
*
* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)
* source  : http://purl.eligrey.com/github/FileSaver.js
*/

// The one and only way of getting global scope in all environments
// https://stackoverflow.com/q/3277182/1008999
var _global = typeof window === 'object' && window.window === window
  ? window : typeof self === 'object' && self.self === self
  ? self : typeof global === 'object' && global.global === global
  ? global
  : this

function bom (blob, opts) {
  if (typeof opts === 'undefined') opts = { autoBom: false }
  else if (typeof opts !== 'object') {
    console.warn('Deprecated: Expected third argument to be a object')
    opts = { autoBom: !opts }
  }

  // prepend BOM for UTF-8 XML and text/* types (including HTML)
  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF
  if (opts.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })
  }
  return blob
}

function download (url, name, opts) {
  var xhr = new XMLHttpRequest()
  xhr.open('GET', url)
  xhr.responseType = 'blob'
  xhr.onload = function () {
    saveAs(xhr.response, name, opts)
  }
  xhr.onerror = function () {
    console.error('could not download file')
  }
  xhr.send()
}

function corsEnabled (url) {
  var xhr = new XMLHttpRequest()
  // use sync to avoid popup blocker
  xhr.open('HEAD', url, false)
  try {
    xhr.send()
  } catch (e) {}
  return xhr.status >= 200 && xhr.status <= 299
}

// `a.click()` doesn't work for all browsers (#465)
function click (node) {
  try {
    node.dispatchEvent(new MouseEvent('click'))
  } catch (e) {
    var evt = document.createEvent('MouseEvents')
    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,
                          20, false, false, false, false, 0, null)
    node.dispatchEvent(evt)
  }
}

var saveAs = _global.saveAs || (
  // probably in some web worker
  (typeof window !== 'object' || window !== _global)
    ? function saveAs () { /* noop */ }

  // Use download attribute first if possible (#193 Lumia mobile)
  : 'download' in HTMLAnchorElement.prototype
  ? function saveAs (blob, name, opts) {
    var URL = _global.URL || _global.webkitURL
    var a = document.createElement('a')
    name = name || blob.name || 'download'

    a.download = name
    a.rel = 'noopener' // tabnabbing

    // TODO: detect chrome extensions & packaged apps
    // a.target = '_blank'

    if (typeof blob === 'string') {
      // Support regular links
      a.href = blob
      if (a.origin !== location.origin) {
        corsEnabled(a.href)
          ? download(blob, name, opts)
          : click(a, a.target = '_blank')
      } else {
        click(a)
      }
    } else {
      // Support blobs
      a.href = URL.createObjectURL(blob)
      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s
      setTimeout(function () { click(a) }, 0)
    }
  }

  // Use msSaveOrOpenBlob as a second approach
  : 'msSaveOrOpenBlob' in navigator
  ? function saveAs (blob, name, opts) {
    name = name || blob.name || 'download'

    if (typeof blob === 'string') {
      if (corsEnabled(blob)) {
        download(blob, name, opts)
      } else {
        var a = document.createElement('a')
        a.href = blob
        a.target = '_blank'
        setTimeout(function () { click(a) })
      }
    } else {
      navigator.msSaveOrOpenBlob(bom(blob, opts), name)
    }
  }

  // Fallback to using FileReader and a popup
  : function saveAs (blob, name, opts, popup) {
    // Open a popup immediately do go around popup blocker
    // Mostly only available on user interaction and the fileReader is async so...
    popup = popup || open('', '_blank')
    if (popup) {
      popup.document.title =
      popup.document.body.innerText = 'downloading...'
    }

    if (typeof blob === 'string') return download(blob, name, opts)

    var force = blob.type === 'application/octet-stream'
    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari
    var isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent)

    if ((isChromeIOS || (force && isSafari)) && typeof FileReader !== 'undefined') {
      // Safari doesn't allow downloading of blob URLs
      var reader = new FileReader()
      reader.onloadend = function () {
        var url = reader.result
        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')
        if (popup) popup.location.href = url
        else location = url
        popup = null // reverse-tabnabbing #460
      }
      reader.readAsDataURL(blob)
    } else {
      var URL = _global.URL || _global.webkitURL
      var url = URL.createObjectURL(blob)
      if (popup) popup.location = url
      else location.href = url
      popup = null // reverse-tabnabbing #460
      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s
    }
  }
)

_global.saveAs = saveAs.saveAs = saveAs

if (typeof module !== 'undefined') {
  module.exports = saveAs;
}


/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.8.1
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
;(function(factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports !== 'undefined') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                focusOnChange: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if ( asNavFor && asNavFor !== null ) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if(!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if ( _.slideCount > _.options.slidesToShow ) {
            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if ( !_.paused && !_.interrupted && !_.focussed ) {

            if ( _.options.infinite === false ) {

                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                    _.direction = 0;
                }

                else if ( _.direction === 0 ) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if ( _.currentSlide - 1 === 0 ) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler( slideTo );

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true ) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if( _.slideCount > _.options.slidesToShow ) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add( _.$nextArrow )

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
                .children( _.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if(_.options.rows > 0) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for(a = 0; a < numOfSlides; a++){
                var slide = document.createElement('div');
                for(b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for(c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width':(100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if ( _.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if( !initial && triggerBreakpoint !== false ) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if(!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

            if (_.options.accessibility === true) {
                _.$dots.off('keydown.slick', _.keyHandler);
            }
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow && _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow && _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this, originalSlides;

        if(_.options.rows > 0) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if ( _.$prevArrow && _.$prevArrow.length ) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.prevArrow )) {
                _.$prevArrow.remove();
            }
        }

        if ( _.$nextArrow && _.$nextArrow.length ) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.nextArrow )) {
                _.$nextArrow.remove();
            }
        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function(){
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if(!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick', '*', function(event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function() {

                if( _.options.pauseOnFocus ) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }

            }, 0);

        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                 ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if(!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide,
            coef;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                coef = -1

                if (_.options.vertical === true && _.options.centerMode === true) {
                    if (_.options.slidesToShow === 2) {
                        coef = -1.5;
                    } else if (_.options.slidesToShow === 1) {
                        coef = -2
                    }
                }
                verticalOffset = (verticalHeight * _.options.slidesToShow) * coef;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft =  0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if ( _.options.autoplay ) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this,
                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
                    return (val >= 0) && (val < _.slideCount);
                });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        if (_.$dots !== null) {
            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                var slideControlIndex = tabControlIndexes.indexOf(i);

                $(this).attr({
                    'role': 'tabpanel',
                    'id': 'slick-slide' + _.instanceUid + i,
                    'tabindex': -1
                });

                if (slideControlIndex !== -1) {
                   var ariaButtonControl = 'slick-slide-control' + _.instanceUid + slideControlIndex
                   if ($('#' + ariaButtonControl).length) {
                     $(this).attr({
                         'aria-describedby': ariaButtonControl
                     });
                   }
                }
            });

            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                var mappedSlideIndex = tabControlIndexes[i];

                $(this).attr({
                    'role': 'presentation'
                });

                $(this).find('button').first().attr({
                    'role': 'tab',
                    'id': 'slick-slide-control' + _.instanceUid + i,
                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                    'aria-label': (i + 1) + ' of ' + numDotGroups,
                    'aria-selected': null,
                    'tabindex': '-1'
                });

            }).eq(_.currentSlide).find('button').attr({
                'aria-selected': 'true',
                'tabindex': '0'
            }).end();
        }

        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
          if (_.options.focusOnChange) {
            _.$slides.eq(i).attr({'tabindex': '0'});
          } else {
            _.$slides.eq(i).removeAttr('tabindex');
          }
        }

        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'previous'
               }, _.changeSlide);
            _.$nextArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'next'
               }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$dots.on('keydown.slick', _.keyHandler);
            }
        }

        if (_.options.dots === true && _.options.pauseOnDotsHover === true && _.slideCount > _.options.slidesToShow) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if ( _.options.pauseOnHover ) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' :  'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({ opacity: 0 }, 100, function() {

                            if (imageSrcSet) {
                                image
                                    .attr('srcset', imageSrcSet );

                                if (imageSizes) {
                                    image
                                        .attr('sizes', imageSizes );
                                }
                            }

                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function() {
                                    image
                                        .removeAttr('data-lazy data-srcset data-sizes')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if( !_.unslicked ) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if ( _.options.autoplay ) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();

                if (_.options.focusOnChange) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function( tryCount ) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ( $imgsToLoad.length ) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                if (imageSrcSet) {
                    image
                        .attr('srcset', imageSrcSet );

                    if (imageSizes) {
                        image
                            .attr('sizes', imageSizes );
                    }
                }

                image
                    .attr( 'src', imageSource )
                    .removeAttr('data-lazy data-srcset data-sizes')
                    .removeClass('slick-loading');

                if ( _.options.adaptiveHeight === true ) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if ( tryCount < 3 ) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout( function() {
                        _.progressiveLazyLoad( tryCount + 1 );
                    }, 500 );

                } else {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [ _ ]);

        }

    };

    Slick.prototype.refresh = function( initializing ) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if ( _.slideCount <= _.options.slidesToShow ) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if( !initializing ) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

            _.respondTo = _.options.respondTo || 'window';

            for ( breakpoint in responsiveSettings ) {

                l = _.breakpoints.length-1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while( l >= 0 ) {
                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                            _.breakpoints.splice(l,1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return ( _.options.mobileFirst ) ? a-b : b-a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if( !_.unslicked ) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
    Slick.prototype.slickSetOption = function() {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this, l, item, option, value, refresh = false, type;

        if( $.type( arguments[0] ) === 'object' ) {

            option =  arguments[0];
            refresh = arguments[1];
            type = 'multiple';

        } else if ( $.type( arguments[0] ) === 'string' ) {

            option =  arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                type = 'responsive';

            } else if ( typeof arguments[1] !== 'undefined' ) {

                type = 'single';

            }

        }

        if ( type === 'single' ) {

            _.options[option] = value;


        } else if ( type === 'multiple' ) {

            $.each( option , function( opt, val ) {

                _.options[opt] = val;

            });


        } else if ( type === 'responsive' ) {

            for ( item in value ) {

                if( $.type( _.options.responsive ) !== 'array' ) {

                    _.options.responsive = [ value[item] ];

                } else {

                    l = _.options.responsive.length-1;

                    // loop through the responsive object and splice out duplicates.
                    while( l >= 0 ) {

                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                            _.options.responsive.splice(l,1);

                        }

                        l--;

                    }

                    _.options.responsive.push( value[item] );

                }

            }

        }

        if ( refresh ) {

            _.unload();
            _.reinit();

        }

    };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if ( _.options.fade ) {
            if ( typeof _.options.zIndex === 'number' ) {
                if( _.options.zIndex < 3 ) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            var evenCoef = _.options.slidesToShow % 2 === 0 ? 1 : 0;

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {
                    _.$slides
                        .slice(index - centerOffset + evenCoef, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1 + evenCoef, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function( toggle ) {

        var _ = this;

        if( !toggle ) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if ( _.options.autoplay ) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if ( _.options.asNavFor ) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true && _.slideCount > _.options.slidesToShow) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

        if ( _.touchObject.curX === undefined ) {
            return false;
        }

        if ( _.touchObject.edgeHit === true ) {
            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
        }

        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

            direction = _.swipeDirection();

            switch ( direction ) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if( direction != 'vertical' ) {

                _.slideHandler( slideCount );
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction ]);

            }

        } else {

            if ( _.touchObject.startX !== _.touchObject.curX ) {

                _.slideHandler( _.currentSlide );
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if ( _.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite ) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                    .removeClass('slick-active')
                    .end();

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active');

        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if ( _.options.autoplay ) {

            if ( document[_.hidden] ) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));




$(function(){
//import helpers from 'helpers';
//import classes from 'classes';

const componentSelector = '[data-options*=carousel]';

function allImgLoaded(parent) {
  // eslint-disable-next-line no-undef, no-unused-vars
  return new Promise(function(resolve, reject){
    const $imgs = $(parent).find('img');
    // Total images is still the total number of <img> elements on the page.
    const totalImages = $imgs.length;
    // Images loaded is zero because we're going to process a new set of images.
    var imagesLoaded = 0;

    // Do exactly as we had before -- increment the loaded count and if all are
    // loaded, call the allImagesLoaded() function.
    function imageLoaded() {
      imagesLoaded++;

      if (imagesLoaded == totalImages) {
        resolve('all images loaded');
      }
    };

    // Step through each image in the DOM, clone it, attach an onload event
    // listener, then set its source to the source of the original image. When
    // that new image has loaded, fire the imageLoaded() callback.
    $imgs.each(function(i, img) {
      $('<img>')
        .on('load', imageLoaded)
        .on('error', function() {
          reject('Error when loading image');
        })
        .attr('src', $(img).attr('src'));
    });

  });
}

function init() {
  $(componentSelector).each(function(i, el) {
    $(el).on('init', function() {
      $(el).addClass('is-initialized');
    });

    allImgLoaded(el)
      .then(function() {
        $(el).slick({
          centerMode: true,
          slidesToShow: 1,
          slidesToScroll: 1,
          arrows: true,
          speed: 500,
          variableWidth: true,
          focusOnSelect: true
        });
      })
      .catch(function(msg) {
        console.log(msg); // eslint-disable-line no-console
      });
  });

};

  init();

});



$(function(){
const photoclasses = {
  modalOpen: 'is-modal-open'
};

const component = '[data-component=photo-gallery]';
const imageContainer = '[data-role=image-container]';
const image = '[data-role=image]';
const imageExpand = '[data-role=image-expand]';
const imageDownload = '[data-role=image-download]';
const close = '[data-role=close]';
const modal = '[data-role=modal]';
const modalScreen = '[data-role=modal-screen]';
const previousBtn = 'button.slick-prev.slick-arrow';
const nextBtn = 'button.slick-next.slick-arrow';
const key = 'setOfImages';
const flag = 'revolutionFlag';

// Event Handlers

const imageExpandHandler = function(e) {
  e.preventDefault();
  e.stopPropagation();

  const $self = $(this);
  const $component = $(this).closest(component);
  const $modal = $component.find(modal);
  const $modalScreen = $modal.find(modalScreen);
  const $imgContainer = $self.closest(imageContainer);
  const $img = $imgContainer.find(image);
  const $modalDownload = $modal.find(imageDownload);
  const $close = $modal.find(close);
  const imgSrc = $self.next().attr('data-image');
  const index = $self.closest('[data-slick-index]').attr('data-slick-index');
  const bgImg = $img.attr('src');

  $modalScreen.css('background-image', 'url('+bgImg+')').attr('data-modal-index', index);
  $modal.css('display', 'flex').addClass(photoclasses.modalOpen);
  $close.focus();
  $modalDownload.attr('data-image', imgSrc);
};

const closeHandler = function(e) {
  e.preventDefault();
  e.stopPropagation();

  const $component = $(this).closest(component);
  const $modal = $component.find(modal);
  const $expandButton = $component.find("[data-slick-index="+$modal.attr('data-modal-index')+"] "+imageExpand);
  $expandButton.focus();
  $modal.css('display', 'none').removeClass(photoclasses.modalOpen);
};

const imageDownloadHandler = function(e) {
  e.preventDefault();
  e.stopPropagation();

  const $self = $(this);
  const activeImg = $self.attr('data-image');
  const imgUploadName = $self.attr('data-image');
  const imgName = imgUploadName.split('/').pop();

  saveAs(activeImg, imgName);
};

// GTM Event Trigger : Photo Gallery Revolution

const slideChangeHandler = function(e) {
  e.preventDefault();
  e.stopPropagation();

  var $slideItems = $(this).closest('.c-photo-gallery__items');
  var $currentSlide = $slideItems.find('.slick-current');
  var slideIndex = $currentSlide.attr('data-slick-index');

  if (!$slideItems.data(key)) {
    $slideItems.data(key, new Set(['0'])); // eslint-disable-line no-undef
    $slideItems.data(flag, false);
  }

  $slideItems.data(key, $slideItems.data(key).add(slideIndex));
  _revolutionComplete($slideItems);
};

const _revolutionComplete = function($items) {
  const noOfSlides = $items.find('.slick-slide:not(.slick-cloned)').length;

  if ($items.data(key).size == noOfSlides && !$items.data(flag)) {
    $items.data(flag, true);
    if (window.dataLayer) {
      window.dataLayer.push({ event: 'gallery_revolution' });
    }
  }
};

$(document).on('keyup', function(e) {
  if (e.keyCode === 27) {
    $(close).trigger('click');
  }
});

$(component)
  .on('click', imageExpand, imageExpandHandler)
  .on('click', close, closeHandler)
  .on('click', imageDownload, imageDownloadHandler)
  .on('click', previousBtn, slideChangeHandler)
  .on('click', nextBtn, slideChangeHandler);

// Carousel effects

$('.c-photo-gallery__carousel')
  .on('mouseover', '.slick-slide .c-photo-gallery__image', function(e) {
    var $slideImage = $(e.currentTarget);
    var $slideItems = $slideImage.closest('.c-photo-gallery__items');
    var $slideImages = $slideItems.find('.slick-slide .c-photo-gallery__image');
    var $currentSlide = $slideImages.filter(
      '.slick-current .c-photo-gallery__image'
    );

    if (
      $slideImages.index($slideImage) ==
      $slideImages.index($currentSlide) - 1
    ) {
      $slideImage.find('.image').addClass('light-up');
      $slideItems.find('.slick-list').addClass('shift-right');
    }

    if (
      $slideImages.index($slideImage) ==
      $slideImages.index($currentSlide) + 1
    ) {
      $slideImage.find('.image').addClass('light-up');
      $slideItems.find('.slick-list').addClass('shift-left');
    }
  })
  .on('mouseout', '.slick-slide .c-photo-gallery__image', function(e) {
    var $slideImage = $(e.currentTarget);
    var $slideItems = $slideImage.closest('.c-photo-gallery__items');
    $slideImage.find('.image').removeClass('light-up');
    $slideItems.find('.slick-list').removeClass('shift-right');
    $slideItems.find('.slick-list').removeClass('shift-left');
  });
});


$(function () {
  $('div.globaltoutblock > div.c-top-banner').each(function () {
    //console.log($(this).data("cache-value"));
    var selected = $(this).data("cache-value");
    var x = localStorage.getItem("dismissedTout");
    //console.log("X:::::" + x);
    if (x != '' || x == null) {
      $(".globaltoutpanel").show();
    }
    else {
      $(".globaltoutpanel").hide();
    }
    if (x) {
      if (x.includes(selected)) {
        $(this).closest("div").hide();
      }
      else {
        $(".globaltoutpanel").show();
      }
    }

  });

});




$(function () {

  let html = `
  <div fxlayout="row" fxlayoutalign="center center" 
  class="search-results__spinner " 
  style="flex-direction: row; box-sizing: border-box; display: flex; place-content: center; align-items: center;">
  <mat-spinner role="progressbar" mode="indeterminate" 
  class="mat-spinner mat-progress-spinner mat-primary 
  mat-progress-spinner-indeterminate-animation" 
  style="width: 100px; height: 100px;">
  <svg preserveAspectRatio="xMidYMid meet" 
  focusable="false" viewBox="0 0 100 100" 
  style="width: 100px; height: 100px;">
  <circle cx="50%" cy="50%" r="45" 
  style="animation-name: mat-progress-spinner-stroke-rotate-100; 
  stroke-dasharray: 282.743px; stroke-width: 10%;"></circle>
  </svg></mat-spinner></div>
  `;

  let api = $(".data-point-set-api").attr("data-set-api");

  if (api && api == "/serviceendpoints/job-search") {

    $("#loader").removeClass("hide");
    $("#loader").html(html);
    $(".data-point-set__items").addClass("hide");
    job_and_location_count(api);

  }



  function job_and_location_count(api) {
    var internal_flag = 'external';

    var api_start = performance.now();
    $.getJSON(api, { format: 'json', limit: 1, page: 1, external_or_internal: internal_flag }, function (data) {
      if (!data || !data.facets || !data.facets.fields) {
        return;
      }

      var api_end = performance.now();
      // Calculate the time taken and output the result in the console
      console.log('API took ' + (api_end - api_start) + ' milliseconds to execute.');


      var cal_start = performance.now();
      var country_state_city = _.get(data, 'facets.fields.country_state_city', []);

      if (country_state_city.length) {
        let jobCountOriginal = 0;
        let cityCount = 0;

        country_state_city.forEach(function (countryStateCity) {
          var location = countryStateCity[0].split('-');
          var jobCount = countryStateCity[1];
          jobCountOriginal = jobCountOriginal + jobCount;

          if (location.length >= 3 && location[0].toLowerCase() === 'usa') {
            cityCount++;

          }
        });

        job_location_obj = {
          0: jobCountOriginal,
          1: cityCount
        }

        job_caption_obj = {
          0: "Open jobs",
          1: "Locations with open jobs"
        }

        $(".data-point-set-api .o-container-grid_item__inner").each(function (index, item_row) {
          var figureContainer = $(item_row);
          if (typeof job_location_obj[index] !== 'undefined') {
            figureContainer.find('.o-figure__value p:first').html(job_location_obj[index]);
          }
         });

        $(".data-point-set-api .o-container-grid_item__inner").each(function (index, item_row) {
          var figureContainer = $(item_row);
          if (typeof job_location_obj[index] !== 'undefined') {
            figureContainer.find('.o-figure__caption p:first').html(job_caption_obj[index]);
          }
        });

      }
      $("#loader").addClass("hide");
      $(".data-point-set__items").removeClass("hide");

      var cal_end = performance.now();

      // Calculate the time taken and output the result in the console
      console.log('Calculation took ' + (cal_end - cal_start) + ' milliseconds to execute.');
      
    })
      .fail(function (response) {
        $("#loader").addClass("hide");
        $(".data-point-set__items").removeClass("hide");
      });
  }

});

